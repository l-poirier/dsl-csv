/**
 * generated by Xtext 2.25.0
 */
package fr.irisa.dslCsv.tests;

import com.google.inject.Inject;
import fr.irisa.dslCsv.ArithExpression;
import fr.irisa.dslCsv.Assign;
import fr.irisa.dslCsv.BaseExpression;
import fr.irisa.dslCsv.CompExpression;
import fr.irisa.dslCsv.ConstNat;
import fr.irisa.dslCsv.ConstStr;
import fr.irisa.dslCsv.Expression;
import fr.irisa.dslCsv.LogicalExpression;
import fr.irisa.dslCsv.Program;
import fr.irisa.dslCsv.SubExpression;
import fr.irisa.tests.DslCsvInjectorProvider;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(InjectionExtension.class)
@InjectWith(DslCsvInjectorProvider.class)
@SuppressWarnings("all")
public class AssignParsingTest {
  @Inject
  private ParseHelper<Program> parseHelper;
  
  @Test
  public void NestedAssign() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("a=b=c");
      _builder.newLine();
      final Program result = this.parseHelper.parse(_builder);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      try {
        Expression _get = result.getExpr().get(0);
        final Assign a = ((Assign) _get);
        Assertions.assertEquals(a.getVar(), "a");
        Expression _val = a.getVal();
        Assertions.assertEquals(((Assign) _val).getVar(), "b");
      } catch (final Throwable _t) {
        if (_t instanceof ClassCastException) {
          Assertions.<Object>fail("Wrong type in tests");
        } else {
          throw Exceptions.sneakyThrow(_t);
        }
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void ConstNatAssign() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("a=1");
      _builder.newLine();
      final Program result = this.parseHelper.parse(_builder);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      try {
        Expression _get = result.getExpr().get(0);
        final Assign a = ((Assign) _get);
        Assertions.assertEquals(a.getVar(), "a");
        Expression _val = a.getVal();
        CompExpression _left = ((LogicalExpression) _val).getLeft();
        ArithExpression _left_1 = ((CompExpression) _left).getLeft();
        SubExpression _left_2 = ((ArithExpression) _left_1).getLeft();
        BaseExpression _left_3 = ((SubExpression) _left_2).getLeft();
        Assertions.assertEquals(
          ((ConstNat) _left_3).getConstNat(), 1);
      } catch (final Throwable _t) {
        if (_t instanceof ClassCastException) {
          Assertions.<Object>fail("Wrong type in tests");
        } else {
          throw Exceptions.sneakyThrow(_t);
        }
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void ComplexAssign() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("b={1, 2, 3} * c");
      _builder.newLine();
      final Program result = this.parseHelper.parse(_builder);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      try {
        Expression _get = result.getExpr().get(0);
        final Assign a = ((Assign) _get);
        Assertions.assertEquals(a.getVar(), "b");
        Expression _val = a.getVal();
        CompExpression _left = ((LogicalExpression) _val).getLeft();
        ArithExpression _left_1 = ((CompExpression) _left).getLeft();
        SubExpression _left_2 = ((ArithExpression) _left_1).getLeft();
        ((SubExpression) _left_2).getLeft();
        Expression _val_1 = a.getVal();
        CompExpression _left_3 = ((LogicalExpression) _val_1).getLeft();
        ArithExpression _left_4 = ((CompExpression) _left_3).getLeft();
        SubExpression _left_5 = ((ArithExpression) _left_4).getLeft();
        ((SubExpression) _left_5).getRight();
        Expression _val_2 = a.getVal();
        CompExpression _left_6 = ((LogicalExpression) _val_2).getLeft();
        ArithExpression _left_7 = ((CompExpression) _left_6).getLeft();
        SubExpression _left_8 = ((ArithExpression) _left_7).getLeft();
        Assertions.assertEquals(
          ((SubExpression) _left_8).getOp(), "*");
      } catch (final Throwable _t) {
        if (_t instanceof ClassCastException) {
          Assertions.<Object>fail("Wrong type in tests");
        } else {
          throw Exceptions.sneakyThrow(_t);
        }
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void ConstStrAssign() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("a=\"abc\"");
      _builder.newLine();
      final Program result = this.parseHelper.parse(_builder);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      try {
        Expression _get = result.getExpr().get(0);
        final Assign a = ((Assign) _get);
        Assertions.assertEquals(a.getVar(), "a");
        Expression _val = a.getVal();
        CompExpression _left = ((LogicalExpression) _val).getLeft();
        ArithExpression _left_1 = ((CompExpression) _left).getLeft();
        SubExpression _left_2 = ((ArithExpression) _left_1).getLeft();
        BaseExpression _left_3 = ((SubExpression) _left_2).getLeft();
        Assertions.assertEquals(
          ((ConstStr) _left_3).getConstStr(), "abc");
      } catch (final Throwable _t) {
        if (_t instanceof ClassCastException) {
          Assertions.<Object>fail("Wrong type in tests");
        } else {
          throw Exceptions.sneakyThrow(_t);
        }
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
