/*
 * generated by Xtext 2.25.0
 */
package fr.irisa.dslCsv.tests.interpreter

import com.google.inject.Inject
import fr.irisa.dslCsv.Program
import fr.irisa.generator.ASTtoInterpretation
import fr.irisa.generator.InterpretationContext
import fr.irisa.tests.DslCsvInjectorProvider
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

@ExtendWith(InjectionExtension)
@InjectWith(DslCsvInjectorProvider)
class AssignInterpretationTest {
	@Inject
	ParseHelper<Program> parseHelper
	
	@Test
	def void CompleteTest() {
		val result = parseHelper.parse('''
			c=1*2;
			a=b=c
		''')
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		try {
			val context = new InterpretationContext()
			ASTtoInterpretation.eval((result as Program).expr, context)
			Assertions.assertEquals(context.variables.get("b"), 2.0)
			Assertions.assertEquals(context.variables.get("c"), 2.0)
			Assertions.assertEquals(context.variables.get("a"), 2.0)
			val wd = System.getProperty("user.dir")
			print(wd)
		} catch(ClassCastException exc) {
			Assertions.fail("Wrong type in tests")
		} 
	}
	
	// Mainly used to measure the execution time
	@Test
	def void StressAcquireTest() {
		// Execute several times to average-out the results
		for(var i=0; i<10; i++) {
			val result = parseHelper.parse('''
				Acquire("order_products__train.csv", ",", 1)
			''')
			val errors = result.eResource.errors
			Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
					ASTtoInterpretation.eval((result as Program).expr, new InterpretationContext())
		}		
	}
	
	// Mainly used to measure the execution time
	@Test
	def void StressAcquireSaveTest() {
		// Execute several times to average-out the results
		for(var i=0; i<10; i++) {
			val result = parseHelper.parse('''
				a=Acquire("order_products__train.csv", ",", 1);
				Save("order_products__train_copy.csv", a, ",", 1, 1)
			''')
			val errors = result.eResource.errors
			Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
					ASTtoInterpretation.eval((result as Program).expr, new InterpretationContext())
		}		
	}

	// Parsing diverse construction
	@Test
	def void ParsingTest(){
		val result = parseHelper.parse('''
			tab = Acquire("exemple.csv", ",", 1);
			col = Select(tab, 1);
			f = Filter(tab, col > (Mean(col)));
			sum = Sum(f);
			Save("colfiltsum.csv", Row(Select(f, 1), sum), ",", 1, 0);
			Print(Features(tab));
			Print("nombre total de valeurs : " + (Product(Dim(tab))) + " champs")
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
}
