/*
 * generated by Xtext 2.25.0
 */
grammar InternalDslCsv;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package fr.irisa.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.irisa.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import fr.irisa.services.DslCsvGrammarAccess;

}
@parser::members {
	private DslCsvGrammarAccess grammarAccess;

	public void setGrammarAccess(DslCsvGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleProgram
entryRuleProgram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgramAccess().getGroup()); }
		(rule__Program__Group__0)
		{ after(grammarAccess.getProgramAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
		(rule__Expression__Alternatives)
		{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssign
entryRuleAssign
:
{ before(grammarAccess.getAssignRule()); }
	 ruleAssign
{ after(grammarAccess.getAssignRule()); } 
	 EOF 
;

// Rule Assign
ruleAssign 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignAccess().getGroup()); }
		(rule__Assign__Group__0)
		{ after(grammarAccess.getAssignAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNop
entryRuleNop
:
{ before(grammarAccess.getNopRule()); }
	 ruleNop
{ after(grammarAccess.getNopRule()); } 
	 EOF 
;

// Rule Nop
ruleNop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNopAccess().getGroup()); }
		(rule__Nop__Group__0)
		{ after(grammarAccess.getNopAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLogicalExpression
entryRuleLogicalExpression
:
{ before(grammarAccess.getLogicalExpressionRule()); }
	 ruleLogicalExpression
{ after(grammarAccess.getLogicalExpressionRule()); } 
	 EOF 
;

// Rule LogicalExpression
ruleLogicalExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLogicalExpressionAccess().getGroup()); }
		(rule__LogicalExpression__Group__0)
		{ after(grammarAccess.getLogicalExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCompExpression
entryRuleCompExpression
:
{ before(grammarAccess.getCompExpressionRule()); }
	 ruleCompExpression
{ after(grammarAccess.getCompExpressionRule()); } 
	 EOF 
;

// Rule CompExpression
ruleCompExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCompExpressionAccess().getGroup()); }
		(rule__CompExpression__Group__0)
		{ after(grammarAccess.getCompExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArithExpression
entryRuleArithExpression
:
{ before(grammarAccess.getArithExpressionRule()); }
	 ruleArithExpression
{ after(grammarAccess.getArithExpressionRule()); } 
	 EOF 
;

// Rule ArithExpression
ruleArithExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArithExpressionAccess().getGroup()); }
		(rule__ArithExpression__Group__0)
		{ after(grammarAccess.getArithExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSubExpression
entryRuleSubExpression
:
{ before(grammarAccess.getSubExpressionRule()); }
	 ruleSubExpression
{ after(grammarAccess.getSubExpressionRule()); } 
	 EOF 
;

// Rule SubExpression
ruleSubExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSubExpressionAccess().getGroup()); }
		(rule__SubExpression__Group__0)
		{ after(grammarAccess.getSubExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBaseExpression
entryRuleBaseExpression
:
{ before(grammarAccess.getBaseExpressionRule()); }
	 ruleBaseExpression
{ after(grammarAccess.getBaseExpressionRule()); } 
	 EOF 
;

// Rule BaseExpression
ruleBaseExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBaseExpressionAccess().getAlternatives()); }
		(rule__BaseExpression__Alternatives)
		{ after(grammarAccess.getBaseExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVar
entryRuleVar
:
{ before(grammarAccess.getVarRule()); }
	 ruleVar
{ after(grammarAccess.getVarRule()); } 
	 EOF 
;

// Rule Var
ruleVar 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarAccess().getVarAssignment()); }
		(rule__Var__VarAssignment)
		{ after(grammarAccess.getVarAccess().getVarAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstNat
entryRuleConstNat
:
{ before(grammarAccess.getConstNatRule()); }
	 ruleConstNat
{ after(grammarAccess.getConstNatRule()); } 
	 EOF 
;

// Rule ConstNat
ruleConstNat 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstNatAccess().getConstNatAssignment()); }
		(rule__ConstNat__ConstNatAssignment)
		{ after(grammarAccess.getConstNatAccess().getConstNatAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstStr
entryRuleConstStr
:
{ before(grammarAccess.getConstStrRule()); }
	 ruleConstStr
{ after(grammarAccess.getConstStrRule()); } 
	 EOF 
;

// Rule ConstStr
ruleConstStr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstStrAccess().getConstStrAssignment()); }
		(rule__ConstStr__ConstStrAssignment)
		{ after(grammarAccess.getConstStrAccess().getConstStrAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParenthesis
entryRuleParenthesis
:
{ before(grammarAccess.getParenthesisRule()); }
	 ruleParenthesis
{ after(grammarAccess.getParenthesisRule()); } 
	 EOF 
;

// Rule Parenthesis
ruleParenthesis 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParenthesisAccess().getGroup()); }
		(rule__Parenthesis__Group__0)
		{ after(grammarAccess.getParenthesisAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstVector
entryRuleConstVector
:
{ before(grammarAccess.getConstVectorRule()); }
	 ruleConstVector
{ after(grammarAccess.getConstVectorRule()); } 
	 EOF 
;

// Rule ConstVector
ruleConstVector 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstVectorAccess().getGroup()); }
		(rule__ConstVector__Group__0)
		{ after(grammarAccess.getConstVectorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFuncCall
entryRuleFuncCall
:
{ before(grammarAccess.getFuncCallRule()); }
	 ruleFuncCall
{ after(grammarAccess.getFuncCallRule()); } 
	 EOF 
;

// Rule FuncCall
ruleFuncCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFuncCallAccess().getAlternatives()); }
		(rule__FuncCall__Alternatives)
		{ after(grammarAccess.getFuncCallAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCount
entryRuleCount
:
{ before(grammarAccess.getCountRule()); }
	 ruleCount
{ after(grammarAccess.getCountRule()); } 
	 EOF 
;

// Rule Count
ruleCount 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCountAccess().getGroup()); }
		(rule__Count__Group__0)
		{ after(grammarAccess.getCountAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSort
entryRuleSort
:
{ before(grammarAccess.getSortRule()); }
	 ruleSort
{ after(grammarAccess.getSortRule()); } 
	 EOF 
;

// Rule Sort
ruleSort 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSortAccess().getGroup()); }
		(rule__Sort__Group__0)
		{ after(grammarAccess.getSortAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDim
entryRuleDim
:
{ before(grammarAccess.getDimRule()); }
	 ruleDim
{ after(grammarAccess.getDimRule()); } 
	 EOF 
;

// Rule Dim
ruleDim 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDimAccess().getGroup()); }
		(rule__Dim__Group__0)
		{ after(grammarAccess.getDimAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrint
entryRulePrint
:
{ before(grammarAccess.getPrintRule()); }
	 rulePrint
{ after(grammarAccess.getPrintRule()); } 
	 EOF 
;

// Rule Print
rulePrint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrintAccess().getGroup()); }
		(rule__Print__Group__0)
		{ after(grammarAccess.getPrintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFeatures
entryRuleFeatures
:
{ before(grammarAccess.getFeaturesRule()); }
	 ruleFeatures
{ after(grammarAccess.getFeaturesRule()); } 
	 EOF 
;

// Rule Features
ruleFeatures 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFeaturesAccess().getGroup()); }
		(rule__Features__Group__0)
		{ after(grammarAccess.getFeaturesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRow
entryRuleRow
:
{ before(grammarAccess.getRowRule()); }
	 ruleRow
{ after(grammarAccess.getRowRule()); } 
	 EOF 
;

// Rule Row
ruleRow 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRowAccess().getGroup()); }
		(rule__Row__Group__0)
		{ after(grammarAccess.getRowAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleColumn
entryRuleColumn
:
{ before(grammarAccess.getColumnRule()); }
	 ruleColumn
{ after(grammarAccess.getColumnRule()); } 
	 EOF 
;

// Rule Column
ruleColumn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getColumnAccess().getGroup()); }
		(rule__Column__Group__0)
		{ after(grammarAccess.getColumnAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProduct
entryRuleProduct
:
{ before(grammarAccess.getProductRule()); }
	 ruleProduct
{ after(grammarAccess.getProductRule()); } 
	 EOF 
;

// Rule Product
ruleProduct 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProductAccess().getGroup()); }
		(rule__Product__Group__0)
		{ after(grammarAccess.getProductAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSum
entryRuleSum
:
{ before(grammarAccess.getSumRule()); }
	 ruleSum
{ after(grammarAccess.getSumRule()); } 
	 EOF 
;

// Rule Sum
ruleSum 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSumAccess().getGroup()); }
		(rule__Sum__Group__0)
		{ after(grammarAccess.getSumAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMean
entryRuleMean
:
{ before(grammarAccess.getMeanRule()); }
	 ruleMean
{ after(grammarAccess.getMeanRule()); } 
	 EOF 
;

// Rule Mean
ruleMean 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMeanAccess().getGroup()); }
		(rule__Mean__Group__0)
		{ after(grammarAccess.getMeanAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFilter
entryRuleFilter
:
{ before(grammarAccess.getFilterRule()); }
	 ruleFilter
{ after(grammarAccess.getFilterRule()); } 
	 EOF 
;

// Rule Filter
ruleFilter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFilterAccess().getGroup()); }
		(rule__Filter__Group__0)
		{ after(grammarAccess.getFilterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnselect
entryRuleUnselect
:
{ before(grammarAccess.getUnselectRule()); }
	 ruleUnselect
{ after(grammarAccess.getUnselectRule()); } 
	 EOF 
;

// Rule Unselect
ruleUnselect 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnselectAccess().getGroup()); }
		(rule__Unselect__Group__0)
		{ after(grammarAccess.getUnselectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSelect
entryRuleSelect
:
{ before(grammarAccess.getSelectRule()); }
	 ruleSelect
{ after(grammarAccess.getSelectRule()); } 
	 EOF 
;

// Rule Select
ruleSelect 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelectAccess().getGroup()); }
		(rule__Select__Group__0)
		{ after(grammarAccess.getSelectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSave
entryRuleSave
:
{ before(grammarAccess.getSaveRule()); }
	 ruleSave
{ after(grammarAccess.getSaveRule()); } 
	 EOF 
;

// Rule Save
ruleSave 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSaveAccess().getGroup()); }
		(rule__Save__Group__0)
		{ after(grammarAccess.getSaveAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAcquire
entryRuleAcquire
:
{ before(grammarAccess.getAcquireRule()); }
	 ruleAcquire
{ after(grammarAccess.getAcquireRule()); } 
	 EOF 
;

// Rule Acquire
ruleAcquire 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAcquireAccess().getGroup()); }
		(rule__Acquire__Group__0)
		{ after(grammarAccess.getAcquireAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getFuncCallParserRuleCall_0()); }
		ruleFuncCall
		{ after(grammarAccess.getExpressionAccess().getFuncCallParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getAssignParserRuleCall_1()); }
		ruleAssign
		{ after(grammarAccess.getExpressionAccess().getAssignParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getLogicalExpressionParserRuleCall_2()); }
		ruleLogicalExpression
		{ after(grammarAccess.getExpressionAccess().getLogicalExpressionParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getNopParserRuleCall_3()); }
		ruleNop
		{ after(grammarAccess.getExpressionAccess().getNopParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpression__OpAlternatives_1_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicalExpressionAccess().getOpVerticalLineKeyword_1_0_0_0()); }
		'|'
		{ after(grammarAccess.getLogicalExpressionAccess().getOpVerticalLineKeyword_1_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getLogicalExpressionAccess().getOpAmpersandKeyword_1_0_0_1()); }
		'&'
		{ after(grammarAccess.getLogicalExpressionAccess().getOpAmpersandKeyword_1_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__OpAlternatives_1_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompExpressionAccess().getOpLessThanSignKeyword_1_0_0_0()); }
		'<'
		{ after(grammarAccess.getCompExpressionAccess().getOpLessThanSignKeyword_1_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getCompExpressionAccess().getOpGreaterThanSignKeyword_1_0_0_1()); }
		'>'
		{ after(grammarAccess.getCompExpressionAccess().getOpGreaterThanSignKeyword_1_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getCompExpressionAccess().getOpEqualsSignEqualsSignKeyword_1_0_0_2()); }
		'=='
		{ after(grammarAccess.getCompExpressionAccess().getOpEqualsSignEqualsSignKeyword_1_0_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getCompExpressionAccess().getOpLessThanSignEqualsSignKeyword_1_0_0_3()); }
		'<='
		{ after(grammarAccess.getCompExpressionAccess().getOpLessThanSignEqualsSignKeyword_1_0_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getCompExpressionAccess().getOpGreaterThanSignEqualsSignKeyword_1_0_0_4()); }
		'>='
		{ after(grammarAccess.getCompExpressionAccess().getOpGreaterThanSignEqualsSignKeyword_1_0_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getCompExpressionAccess().getOpExclamationMarkEqualsSignKeyword_1_0_0_5()); }
		'!='
		{ after(grammarAccess.getCompExpressionAccess().getOpExclamationMarkEqualsSignKeyword_1_0_0_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithExpression__OpAlternatives_1_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithExpressionAccess().getOpPlusSignKeyword_1_0_0_0()); }
		'+'
		{ after(grammarAccess.getArithExpressionAccess().getOpPlusSignKeyword_1_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getArithExpressionAccess().getOpHyphenMinusKeyword_1_0_0_1()); }
		'-'
		{ after(grammarAccess.getArithExpressionAccess().getOpHyphenMinusKeyword_1_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__OpAlternatives_1_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubExpressionAccess().getOpAsteriskKeyword_1_0_0_0()); }
		'*'
		{ after(grammarAccess.getSubExpressionAccess().getOpAsteriskKeyword_1_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSubExpressionAccess().getOpSolidusKeyword_1_0_0_1()); }
		'/'
		{ after(grammarAccess.getSubExpressionAccess().getOpSolidusKeyword_1_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getSubExpressionAccess().getOpPercentSignKeyword_1_0_0_2()); }
		'%'
		{ after(grammarAccess.getSubExpressionAccess().getOpPercentSignKeyword_1_0_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBaseExpressionAccess().getVarParserRuleCall_0()); }
		ruleVar
		{ after(grammarAccess.getBaseExpressionAccess().getVarParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getBaseExpressionAccess().getConstNatParserRuleCall_1()); }
		ruleConstNat
		{ after(grammarAccess.getBaseExpressionAccess().getConstNatParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getBaseExpressionAccess().getConstStrParserRuleCall_2()); }
		ruleConstStr
		{ after(grammarAccess.getBaseExpressionAccess().getConstStrParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getBaseExpressionAccess().getParenthesisParserRuleCall_3()); }
		ruleParenthesis
		{ after(grammarAccess.getBaseExpressionAccess().getParenthesisParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getBaseExpressionAccess().getConstVectorParserRuleCall_4()); }
		ruleConstVector
		{ after(grammarAccess.getBaseExpressionAccess().getConstVectorParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCall__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncCallAccess().getAcquireParserRuleCall_0()); }
		ruleAcquire
		{ after(grammarAccess.getFuncCallAccess().getAcquireParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getFuncCallAccess().getSaveParserRuleCall_1()); }
		ruleSave
		{ after(grammarAccess.getFuncCallAccess().getSaveParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getFuncCallAccess().getSelectParserRuleCall_2()); }
		ruleSelect
		{ after(grammarAccess.getFuncCallAccess().getSelectParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getFuncCallAccess().getUnselectParserRuleCall_3()); }
		ruleUnselect
		{ after(grammarAccess.getFuncCallAccess().getUnselectParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getFuncCallAccess().getFilterParserRuleCall_4()); }
		ruleFilter
		{ after(grammarAccess.getFuncCallAccess().getFilterParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getFuncCallAccess().getMeanParserRuleCall_5()); }
		ruleMean
		{ after(grammarAccess.getFuncCallAccess().getMeanParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getFuncCallAccess().getSumParserRuleCall_6()); }
		ruleSum
		{ after(grammarAccess.getFuncCallAccess().getSumParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getFuncCallAccess().getProductParserRuleCall_7()); }
		ruleProduct
		{ after(grammarAccess.getFuncCallAccess().getProductParserRuleCall_7()); }
	)
	|
	(
		{ before(grammarAccess.getFuncCallAccess().getColumnParserRuleCall_8()); }
		ruleColumn
		{ after(grammarAccess.getFuncCallAccess().getColumnParserRuleCall_8()); }
	)
	|
	(
		{ before(grammarAccess.getFuncCallAccess().getRowParserRuleCall_9()); }
		ruleRow
		{ after(grammarAccess.getFuncCallAccess().getRowParserRuleCall_9()); }
	)
	|
	(
		{ before(grammarAccess.getFuncCallAccess().getFeaturesParserRuleCall_10()); }
		ruleFeatures
		{ after(grammarAccess.getFuncCallAccess().getFeaturesParserRuleCall_10()); }
	)
	|
	(
		{ before(grammarAccess.getFuncCallAccess().getPrintParserRuleCall_11()); }
		rulePrint
		{ after(grammarAccess.getFuncCallAccess().getPrintParserRuleCall_11()); }
	)
	|
	(
		{ before(grammarAccess.getFuncCallAccess().getDimParserRuleCall_12()); }
		ruleDim
		{ after(grammarAccess.getFuncCallAccess().getDimParserRuleCall_12()); }
	)
	|
	(
		{ before(grammarAccess.getFuncCallAccess().getSortParserRuleCall_13()); }
		ruleSort
		{ after(grammarAccess.getFuncCallAccess().getSortParserRuleCall_13()); }
	)
	|
	(
		{ before(grammarAccess.getFuncCallAccess().getCountParserRuleCall_14()); }
		ruleCount
		{ after(grammarAccess.getFuncCallAccess().getCountParserRuleCall_14()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__0__Impl
	rule__Program__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getExprAssignment_0()); }
	(rule__Program__ExprAssignment_0)
	{ after(grammarAccess.getProgramAccess().getExprAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getGroup_1()); }
	(rule__Program__Group_1__0)*
	{ after(grammarAccess.getProgramAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group_1__0__Impl
	rule__Program__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getSemicolonKeyword_1_0()); }
	';'
	{ after(grammarAccess.getProgramAccess().getSemicolonKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getExprAssignment_1_1()); }
	(rule__Program__ExprAssignment_1_1)
	{ after(grammarAccess.getProgramAccess().getExprAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assign__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assign__Group__0__Impl
	rule__Assign__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignAccess().getVarAssignment_0()); }
	(rule__Assign__VarAssignment_0)
	{ after(grammarAccess.getAssignAccess().getVarAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assign__Group__1__Impl
	rule__Assign__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getAssignAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assign__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignAccess().getValAssignment_2()); }
	(rule__Assign__ValAssignment_2)
	{ after(grammarAccess.getAssignAccess().getValAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Nop__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Nop__Group__0__Impl
	rule__Nop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Nop__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNopAccess().getExclamationMarkKeyword_0()); }
	'!'
	{ after(grammarAccess.getNopAccess().getExclamationMarkKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nop__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Nop__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Nop__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNopAccess().getExprAssignment_1()); }
	(rule__Nop__ExprAssignment_1)
	{ after(grammarAccess.getNopAccess().getExprAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalExpression__Group__0__Impl
	rule__LogicalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalExpressionAccess().getLeftAssignment_0()); }
	(rule__LogicalExpression__LeftAssignment_0)
	{ after(grammarAccess.getLogicalExpressionAccess().getLeftAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalExpressionAccess().getGroup_1()); }
	(rule__LogicalExpression__Group_1__0)?
	{ after(grammarAccess.getLogicalExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalExpression__Group_1__0__Impl
	rule__LogicalExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalExpressionAccess().getOpAssignment_1_0()); }
	(rule__LogicalExpression__OpAssignment_1_0)
	{ after(grammarAccess.getLogicalExpressionAccess().getOpAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalExpressionAccess().getRightAssignment_1_1()); }
	(rule__LogicalExpression__RightAssignment_1_1)
	{ after(grammarAccess.getLogicalExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CompExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompExpression__Group__0__Impl
	rule__CompExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompExpressionAccess().getLeftAssignment_0()); }
	(rule__CompExpression__LeftAssignment_0)
	{ after(grammarAccess.getCompExpressionAccess().getLeftAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompExpressionAccess().getGroup_1()); }
	(rule__CompExpression__Group_1__0)?
	{ after(grammarAccess.getCompExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CompExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompExpression__Group_1__0__Impl
	rule__CompExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompExpressionAccess().getOpAssignment_1_0()); }
	(rule__CompExpression__OpAssignment_1_0)
	{ after(grammarAccess.getCompExpressionAccess().getOpAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompExpressionAccess().getRightAssignment_1_1()); }
	(rule__CompExpression__RightAssignment_1_1)
	{ after(grammarAccess.getCompExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArithExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithExpression__Group__0__Impl
	rule__ArithExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithExpressionAccess().getLeftAssignment_0()); }
	(rule__ArithExpression__LeftAssignment_0)
	{ after(grammarAccess.getArithExpressionAccess().getLeftAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithExpressionAccess().getGroup_1()); }
	(rule__ArithExpression__Group_1__0)?
	{ after(grammarAccess.getArithExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArithExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithExpression__Group_1__0__Impl
	rule__ArithExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithExpressionAccess().getOpAssignment_1_0()); }
	(rule__ArithExpression__OpAssignment_1_0)
	{ after(grammarAccess.getArithExpressionAccess().getOpAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithExpressionAccess().getRightAssignment_1_1()); }
	(rule__ArithExpression__RightAssignment_1_1)
	{ after(grammarAccess.getArithExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SubExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubExpression__Group__0__Impl
	rule__SubExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubExpressionAccess().getLeftAssignment_0()); }
	(rule__SubExpression__LeftAssignment_0)
	{ after(grammarAccess.getSubExpressionAccess().getLeftAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubExpressionAccess().getGroup_1()); }
	(rule__SubExpression__Group_1__0)?
	{ after(grammarAccess.getSubExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SubExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubExpression__Group_1__0__Impl
	rule__SubExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubExpressionAccess().getOpAssignment_1_0()); }
	(rule__SubExpression__OpAssignment_1_0)
	{ after(grammarAccess.getSubExpressionAccess().getOpAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubExpressionAccess().getRightAssignment_1_1()); }
	(rule__SubExpression__RightAssignment_1_1)
	{ after(grammarAccess.getSubExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Parenthesis__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parenthesis__Group__0__Impl
	rule__Parenthesis__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parenthesis__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParenthesisAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getParenthesisAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parenthesis__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parenthesis__Group__1__Impl
	rule__Parenthesis__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parenthesis__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParenthesisAccess().getExprAssignment_1()); }
	(rule__Parenthesis__ExprAssignment_1)
	{ after(grammarAccess.getParenthesisAccess().getExprAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parenthesis__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parenthesis__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parenthesis__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParenthesisAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getParenthesisAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConstVector__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstVector__Group__0__Impl
	rule__ConstVector__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstVector__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstVectorAccess().getLeftCurlyBracketKeyword_0()); }
	'{'
	{ after(grammarAccess.getConstVectorAccess().getLeftCurlyBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstVector__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstVector__Group__1__Impl
	rule__ConstVector__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstVector__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstVectorAccess().getConstVectorAssignment_1()); }
	(rule__ConstVector__ConstVectorAssignment_1)
	{ after(grammarAccess.getConstVectorAccess().getConstVectorAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstVector__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstVector__Group__2__Impl
	rule__ConstVector__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstVector__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstVectorAccess().getGroup_2()); }
	(rule__ConstVector__Group_2__0)*
	{ after(grammarAccess.getConstVectorAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstVector__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstVector__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstVector__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstVectorAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getConstVectorAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConstVector__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstVector__Group_2__0__Impl
	rule__ConstVector__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstVector__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstVectorAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getConstVectorAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstVector__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstVector__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstVector__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstVectorAccess().getConstVectorAssignment_2_1()); }
	(rule__ConstVector__ConstVectorAssignment_2_1)
	{ after(grammarAccess.getConstVectorAccess().getConstVectorAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Count__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Count__Group__0__Impl
	rule__Count__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Count__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCountAccess().getCountKeyword_0()); }
	'Count'
	{ after(grammarAccess.getCountAccess().getCountKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Count__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Count__Group__1__Impl
	rule__Count__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Count__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCountAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getCountAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Count__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Count__Group__2__Impl
	rule__Count__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Count__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCountAccess().getVectorAssignment_2()); }
	(rule__Count__VectorAssignment_2)
	{ after(grammarAccess.getCountAccess().getVectorAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Count__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Count__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Count__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCountAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getCountAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sort__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sort__Group__0__Impl
	rule__Sort__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sort__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSortAccess().getSortKeyword_0()); }
	'Sort'
	{ after(grammarAccess.getSortAccess().getSortKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sort__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sort__Group__1__Impl
	rule__Sort__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Sort__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSortAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getSortAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sort__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sort__Group__2__Impl
	rule__Sort__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Sort__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSortAccess().getFileAssignment_2()); }
	(rule__Sort__FileAssignment_2)
	{ after(grammarAccess.getSortAccess().getFileAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sort__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sort__Group__3__Impl
	rule__Sort__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Sort__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSortAccess().getCommaKeyword_3()); }
	','
	{ after(grammarAccess.getSortAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sort__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sort__Group__4__Impl
	rule__Sort__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Sort__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSortAccess().getCriterionAssignment_4()); }
	(rule__Sort__CriterionAssignment_4)
	{ after(grammarAccess.getSortAccess().getCriterionAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sort__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sort__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sort__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSortAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getSortAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Dim__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dim__Group__0__Impl
	rule__Dim__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Dim__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDimAccess().getDimKeyword_0()); }
	'Dim'
	{ after(grammarAccess.getDimAccess().getDimKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dim__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dim__Group__1__Impl
	rule__Dim__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Dim__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDimAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getDimAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dim__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dim__Group__2__Impl
	rule__Dim__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Dim__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDimAccess().getExprAssignment_2()); }
	(rule__Dim__ExprAssignment_2)
	{ after(grammarAccess.getDimAccess().getExprAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dim__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dim__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Dim__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDimAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getDimAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Print__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__0__Impl
	rule__Print__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getPrintKeyword_0()); }
	'Print'
	{ after(grammarAccess.getPrintAccess().getPrintKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__1__Impl
	rule__Print__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getPrintAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__2__Impl
	rule__Print__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getExprAssignment_2()); }
	(rule__Print__ExprAssignment_2)
	{ after(grammarAccess.getPrintAccess().getExprAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getPrintAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Features__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Features__Group__0__Impl
	rule__Features__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Features__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeaturesAccess().getFeaturesKeyword_0()); }
	'Features'
	{ after(grammarAccess.getFeaturesAccess().getFeaturesKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Features__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Features__Group__1__Impl
	rule__Features__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Features__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeaturesAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getFeaturesAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Features__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Features__Group__2__Impl
	rule__Features__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Features__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeaturesAccess().getFileAssignment_2()); }
	(rule__Features__FileAssignment_2)
	{ after(grammarAccess.getFeaturesAccess().getFileAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Features__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Features__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Features__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeaturesAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getFeaturesAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Row__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Row__Group__0__Impl
	rule__Row__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRowAccess().getRowKeyword_0()); }
	'Row'
	{ after(grammarAccess.getRowAccess().getRowKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Row__Group__1__Impl
	rule__Row__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRowAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getRowAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Row__Group__2__Impl
	rule__Row__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRowAccess().getFileAssignment_2()); }
	(rule__Row__FileAssignment_2)
	{ after(grammarAccess.getRowAccess().getFileAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Row__Group__3__Impl
	rule__Row__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRowAccess().getCommaKeyword_3()); }
	','
	{ after(grammarAccess.getRowAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Row__Group__4__Impl
	rule__Row__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRowAccess().getVectorAssignment_4()); }
	(rule__Row__VectorAssignment_4)
	{ after(grammarAccess.getRowAccess().getVectorAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Row__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRowAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getRowAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Column__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__0__Impl
	rule__Column__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getColumnKeyword_0()); }
	'Column'
	{ after(grammarAccess.getColumnAccess().getColumnKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__1__Impl
	rule__Column__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getColumnAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__2__Impl
	rule__Column__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getFileAssignment_2()); }
	(rule__Column__FileAssignment_2)
	{ after(grammarAccess.getColumnAccess().getFileAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__3__Impl
	rule__Column__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getCommaKeyword_3()); }
	','
	{ after(grammarAccess.getColumnAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__4__Impl
	rule__Column__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getColumnNameAssignment_4()); }
	(rule__Column__ColumnNameAssignment_4)
	{ after(grammarAccess.getColumnAccess().getColumnNameAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__5__Impl
	rule__Column__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getCommaKeyword_5()); }
	','
	{ after(grammarAccess.getColumnAccess().getCommaKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__6__Impl
	rule__Column__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getVectorAssignment_6()); }
	(rule__Column__VectorAssignment_6)
	{ after(grammarAccess.getColumnAccess().getVectorAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getRightParenthesisKeyword_7()); }
	')'
	{ after(grammarAccess.getColumnAccess().getRightParenthesisKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Product__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Product__Group__0__Impl
	rule__Product__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Product__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProductAccess().getProductKeyword_0()); }
	'Product'
	{ after(grammarAccess.getProductAccess().getProductKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Product__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Product__Group__1__Impl
	rule__Product__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Product__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProductAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getProductAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Product__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Product__Group__2__Impl
	rule__Product__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Product__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProductAccess().getVectorAssignment_2()); }
	(rule__Product__VectorAssignment_2)
	{ after(grammarAccess.getProductAccess().getVectorAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Product__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Product__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Product__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProductAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getProductAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sum__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sum__Group__0__Impl
	rule__Sum__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSumAccess().getSumKeyword_0()); }
	'Sum'
	{ after(grammarAccess.getSumAccess().getSumKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sum__Group__1__Impl
	rule__Sum__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSumAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getSumAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sum__Group__2__Impl
	rule__Sum__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSumAccess().getVectorAssignment_2()); }
	(rule__Sum__VectorAssignment_2)
	{ after(grammarAccess.getSumAccess().getVectorAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sum__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSumAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getSumAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Mean__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mean__Group__0__Impl
	rule__Mean__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mean__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMeanAccess().getMeanKeyword_0()); }
	'Mean'
	{ after(grammarAccess.getMeanAccess().getMeanKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mean__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mean__Group__1__Impl
	rule__Mean__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Mean__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMeanAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getMeanAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mean__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mean__Group__2__Impl
	rule__Mean__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Mean__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMeanAccess().getVectorAssignment_2()); }
	(rule__Mean__VectorAssignment_2)
	{ after(grammarAccess.getMeanAccess().getVectorAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mean__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mean__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mean__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMeanAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getMeanAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Filter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Filter__Group__0__Impl
	rule__Filter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFilterAccess().getFilterKeyword_0()); }
	'Filter'
	{ after(grammarAccess.getFilterAccess().getFilterKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Filter__Group__1__Impl
	rule__Filter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFilterAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getFilterAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Filter__Group__2__Impl
	rule__Filter__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFilterAccess().getFileAssignment_2()); }
	(rule__Filter__FileAssignment_2)
	{ after(grammarAccess.getFilterAccess().getFileAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Filter__Group__3__Impl
	rule__Filter__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFilterAccess().getCommaKeyword_3()); }
	','
	{ after(grammarAccess.getFilterAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Filter__Group__4__Impl
	rule__Filter__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFilterAccess().getCondAssignment_4()); }
	(rule__Filter__CondAssignment_4)
	{ after(grammarAccess.getFilterAccess().getCondAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Filter__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFilterAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getFilterAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Unselect__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Unselect__Group__0__Impl
	rule__Unselect__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Unselect__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnselectAccess().getUnselectKeyword_0()); }
	'Unselect'
	{ after(grammarAccess.getUnselectAccess().getUnselectKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Unselect__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Unselect__Group__1__Impl
	rule__Unselect__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Unselect__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnselectAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getUnselectAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Unselect__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Unselect__Group__2__Impl
	rule__Unselect__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Unselect__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnselectAccess().getFileAssignment_2()); }
	(rule__Unselect__FileAssignment_2)
	{ after(grammarAccess.getUnselectAccess().getFileAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Unselect__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Unselect__Group__3__Impl
	rule__Unselect__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Unselect__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnselectAccess().getCommaKeyword_3()); }
	','
	{ after(grammarAccess.getUnselectAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Unselect__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Unselect__Group__4__Impl
	rule__Unselect__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Unselect__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnselectAccess().getFeaturesAssignment_4()); }
	(rule__Unselect__FeaturesAssignment_4)
	{ after(grammarAccess.getUnselectAccess().getFeaturesAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Unselect__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Unselect__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Unselect__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnselectAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getUnselectAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group__0__Impl
	rule__Select__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getSelectKeyword_0()); }
	'Select'
	{ after(grammarAccess.getSelectAccess().getSelectKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group__1__Impl
	rule__Select__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getSelectAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group__2__Impl
	rule__Select__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getFileAssignment_2()); }
	(rule__Select__FileAssignment_2)
	{ after(grammarAccess.getSelectAccess().getFileAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group__3__Impl
	rule__Select__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getCommaKeyword_3()); }
	','
	{ after(grammarAccess.getSelectAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group__4__Impl
	rule__Select__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getFeaturesAssignment_4()); }
	(rule__Select__FeaturesAssignment_4)
	{ after(grammarAccess.getSelectAccess().getFeaturesAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getSelectAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Save__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Save__Group__0__Impl
	rule__Save__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Save__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSaveAccess().getSaveKeyword_0()); }
	'Save'
	{ after(grammarAccess.getSaveAccess().getSaveKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Save__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Save__Group__1__Impl
	rule__Save__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Save__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSaveAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getSaveAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Save__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Save__Group__2__Impl
	rule__Save__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Save__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSaveAccess().getFilenameAssignment_2()); }
	(rule__Save__FilenameAssignment_2)
	{ after(grammarAccess.getSaveAccess().getFilenameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Save__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Save__Group__3__Impl
	rule__Save__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Save__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSaveAccess().getCommaKeyword_3()); }
	','
	{ after(grammarAccess.getSaveAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Save__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Save__Group__4__Impl
	rule__Save__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Save__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSaveAccess().getFileAssignment_4()); }
	(rule__Save__FileAssignment_4)
	{ after(grammarAccess.getSaveAccess().getFileAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Save__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Save__Group__5__Impl
	rule__Save__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Save__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSaveAccess().getCommaKeyword_5()); }
	','
	{ after(grammarAccess.getSaveAccess().getCommaKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Save__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Save__Group__6__Impl
	rule__Save__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Save__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSaveAccess().getSepAssignment_6()); }
	(rule__Save__SepAssignment_6)
	{ after(grammarAccess.getSaveAccess().getSepAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Save__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Save__Group__7__Impl
	rule__Save__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Save__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSaveAccess().getCommaKeyword_7()); }
	','
	{ after(grammarAccess.getSaveAccess().getCommaKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Save__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Save__Group__8__Impl
	rule__Save__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Save__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSaveAccess().getSaveHeaderAssignment_8()); }
	(rule__Save__SaveHeaderAssignment_8)
	{ after(grammarAccess.getSaveAccess().getSaveHeaderAssignment_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Save__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Save__Group__9__Impl
	rule__Save__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Save__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSaveAccess().getCommaKeyword_9()); }
	','
	{ after(grammarAccess.getSaveAccess().getCommaKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Save__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Save__Group__10__Impl
	rule__Save__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__Save__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSaveAccess().getSaveIDAssignment_10()); }
	(rule__Save__SaveIDAssignment_10)
	{ after(grammarAccess.getSaveAccess().getSaveIDAssignment_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Save__Group__11
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Save__Group__11__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Save__Group__11__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSaveAccess().getRightParenthesisKeyword_11()); }
	')'
	{ after(grammarAccess.getSaveAccess().getRightParenthesisKeyword_11()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Acquire__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Acquire__Group__0__Impl
	rule__Acquire__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Acquire__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAcquireAccess().getAcquireKeyword_0()); }
	'Acquire'
	{ after(grammarAccess.getAcquireAccess().getAcquireKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Acquire__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Acquire__Group__1__Impl
	rule__Acquire__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Acquire__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAcquireAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getAcquireAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Acquire__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Acquire__Group__2__Impl
	rule__Acquire__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Acquire__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAcquireAccess().getPathAssignment_2()); }
	(rule__Acquire__PathAssignment_2)
	{ after(grammarAccess.getAcquireAccess().getPathAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Acquire__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Acquire__Group__3__Impl
	rule__Acquire__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Acquire__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAcquireAccess().getCommaKeyword_3()); }
	','
	{ after(grammarAccess.getAcquireAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Acquire__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Acquire__Group__4__Impl
	rule__Acquire__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Acquire__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAcquireAccess().getSepAssignment_4()); }
	(rule__Acquire__SepAssignment_4)
	{ after(grammarAccess.getAcquireAccess().getSepAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Acquire__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Acquire__Group__5__Impl
	rule__Acquire__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Acquire__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAcquireAccess().getCommaKeyword_5()); }
	','
	{ after(grammarAccess.getAcquireAccess().getCommaKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Acquire__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Acquire__Group__6__Impl
	rule__Acquire__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Acquire__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAcquireAccess().getHasHeaderAssignment_6()); }
	(rule__Acquire__HasHeaderAssignment_6)
	{ after(grammarAccess.getAcquireAccess().getHasHeaderAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Acquire__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Acquire__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Acquire__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAcquireAccess().getRightParenthesisKeyword_7()); }
	')'
	{ after(grammarAccess.getAcquireAccess().getRightParenthesisKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__ExprAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getExprExpressionParserRuleCall_0_0()); }
		ruleExpression
		{ after(grammarAccess.getProgramAccess().getExprExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__ExprAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getExprExpressionParserRuleCall_1_1_0()); }
		ruleExpression
		{ after(grammarAccess.getProgramAccess().getExprExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__VarAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignAccess().getVarIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getAssignAccess().getVarIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__ValAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignAccess().getValExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getAssignAccess().getValExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nop__ExprAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNopAccess().getExprExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getNopAccess().getExprExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpression__LeftAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicalExpressionAccess().getLeftCompExpressionParserRuleCall_0_0()); }
		ruleCompExpression
		{ after(grammarAccess.getLogicalExpressionAccess().getLeftCompExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpression__OpAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicalExpressionAccess().getOpAlternatives_1_0_0()); }
		(rule__LogicalExpression__OpAlternatives_1_0_0)
		{ after(grammarAccess.getLogicalExpressionAccess().getOpAlternatives_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicalExpressionAccess().getRightLogicalExpressionParserRuleCall_1_1_0()); }
		ruleLogicalExpression
		{ after(grammarAccess.getLogicalExpressionAccess().getRightLogicalExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__LeftAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompExpressionAccess().getLeftArithExpressionParserRuleCall_0_0()); }
		ruleArithExpression
		{ after(grammarAccess.getCompExpressionAccess().getLeftArithExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__OpAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompExpressionAccess().getOpAlternatives_1_0_0()); }
		(rule__CompExpression__OpAlternatives_1_0_0)
		{ after(grammarAccess.getCompExpressionAccess().getOpAlternatives_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompExpressionAccess().getRightCompExpressionParserRuleCall_1_1_0()); }
		ruleCompExpression
		{ after(grammarAccess.getCompExpressionAccess().getRightCompExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithExpression__LeftAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithExpressionAccess().getLeftSubExpressionParserRuleCall_0_0()); }
		ruleSubExpression
		{ after(grammarAccess.getArithExpressionAccess().getLeftSubExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithExpression__OpAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithExpressionAccess().getOpAlternatives_1_0_0()); }
		(rule__ArithExpression__OpAlternatives_1_0_0)
		{ after(grammarAccess.getArithExpressionAccess().getOpAlternatives_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithExpression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithExpressionAccess().getRightArithExpressionParserRuleCall_1_1_0()); }
		ruleArithExpression
		{ after(grammarAccess.getArithExpressionAccess().getRightArithExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__LeftAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubExpressionAccess().getLeftBaseExpressionParserRuleCall_0_0()); }
		ruleBaseExpression
		{ after(grammarAccess.getSubExpressionAccess().getLeftBaseExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__OpAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubExpressionAccess().getOpAlternatives_1_0_0()); }
		(rule__SubExpression__OpAlternatives_1_0_0)
		{ after(grammarAccess.getSubExpressionAccess().getOpAlternatives_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubExpressionAccess().getRightSubExpressionParserRuleCall_1_1_0()); }
		ruleSubExpression
		{ after(grammarAccess.getSubExpressionAccess().getRightSubExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var__VarAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarAccess().getVarIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getVarAccess().getVarIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstNat__ConstNatAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstNatAccess().getConstNatINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getConstNatAccess().getConstNatINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstStr__ConstStrAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstStrAccess().getConstStrSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getConstStrAccess().getConstStrSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parenthesis__ExprAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParenthesisAccess().getExprExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getParenthesisAccess().getExprExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstVector__ConstVectorAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstVectorAccess().getConstVectorExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getConstVectorAccess().getConstVectorExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstVector__ConstVectorAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstVectorAccess().getConstVectorExpressionParserRuleCall_2_1_0()); }
		ruleExpression
		{ after(grammarAccess.getConstVectorAccess().getConstVectorExpressionParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Count__VectorAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCountAccess().getVectorExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getCountAccess().getVectorExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sort__FileAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSortAccess().getFileExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getSortAccess().getFileExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sort__CriterionAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSortAccess().getCriterionExpressionParserRuleCall_4_0()); }
		ruleExpression
		{ after(grammarAccess.getSortAccess().getCriterionExpressionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dim__ExprAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDimAccess().getExprExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getDimAccess().getExprExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__ExprAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrintAccess().getExprExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getPrintAccess().getExprExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Features__FileAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeaturesAccess().getFileExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getFeaturesAccess().getFileExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__FileAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRowAccess().getFileExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getRowAccess().getFileExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__VectorAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRowAccess().getVectorExpressionParserRuleCall_4_0()); }
		ruleExpression
		{ after(grammarAccess.getRowAccess().getVectorExpressionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__FileAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnAccess().getFileExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getColumnAccess().getFileExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__ColumnNameAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnAccess().getColumnNameExpressionParserRuleCall_4_0()); }
		ruleExpression
		{ after(grammarAccess.getColumnAccess().getColumnNameExpressionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__VectorAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnAccess().getVectorExpressionParserRuleCall_6_0()); }
		ruleExpression
		{ after(grammarAccess.getColumnAccess().getVectorExpressionParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Product__VectorAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProductAccess().getVectorExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getProductAccess().getVectorExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__VectorAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSumAccess().getVectorExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getSumAccess().getVectorExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mean__VectorAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMeanAccess().getVectorExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getMeanAccess().getVectorExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__FileAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFilterAccess().getFileExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getFilterAccess().getFileExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__CondAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFilterAccess().getCondExpressionParserRuleCall_4_0()); }
		ruleExpression
		{ after(grammarAccess.getFilterAccess().getCondExpressionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Unselect__FileAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnselectAccess().getFileExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getUnselectAccess().getFileExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Unselect__FeaturesAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnselectAccess().getFeaturesExpressionParserRuleCall_4_0()); }
		ruleExpression
		{ after(grammarAccess.getUnselectAccess().getFeaturesExpressionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__FileAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectAccess().getFileExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getSelectAccess().getFileExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__FeaturesAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectAccess().getFeaturesExpressionParserRuleCall_4_0()); }
		ruleExpression
		{ after(grammarAccess.getSelectAccess().getFeaturesExpressionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Save__FilenameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSaveAccess().getFilenameExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getSaveAccess().getFilenameExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Save__FileAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSaveAccess().getFileExpressionParserRuleCall_4_0()); }
		ruleExpression
		{ after(grammarAccess.getSaveAccess().getFileExpressionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Save__SepAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSaveAccess().getSepExpressionParserRuleCall_6_0()); }
		ruleExpression
		{ after(grammarAccess.getSaveAccess().getSepExpressionParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Save__SaveHeaderAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSaveAccess().getSaveHeaderExpressionParserRuleCall_8_0()); }
		ruleExpression
		{ after(grammarAccess.getSaveAccess().getSaveHeaderExpressionParserRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Save__SaveIDAssignment_10
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSaveAccess().getSaveIDExpressionParserRuleCall_10_0()); }
		ruleExpression
		{ after(grammarAccess.getSaveAccess().getSaveIDExpressionParserRuleCall_10_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Acquire__PathAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAcquireAccess().getPathExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getAcquireAccess().getPathExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Acquire__SepAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAcquireAccess().getSepExpressionParserRuleCall_4_0()); }
		ruleExpression
		{ after(grammarAccess.getAcquireAccess().getSepExpressionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Acquire__HasHeaderAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAcquireAccess().getHasHeaderExpressionParserRuleCall_6_0()); }
		ruleExpression
		{ after(grammarAccess.getAcquireAccess().getHasHeaderExpressionParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
