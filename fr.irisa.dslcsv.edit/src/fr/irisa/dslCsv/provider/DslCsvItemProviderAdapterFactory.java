/**
 * generated by Xtext 2.25.0
 */
package fr.irisa.dslCsv.provider;

import fr.irisa.dslCsv.util.DslCsvAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DslCsvItemProviderAdapterFactory extends DslCsvAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DslCsvItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.dslCsv.Program} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProgramItemProvider programItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.dslCsv.Program}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProgramAdapter() {
		if (programItemProvider == null) {
			programItemProvider = new ProgramItemProvider(this);
		}

		return programItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.dslCsv.Expression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpressionItemProvider expressionItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.dslCsv.Expression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpressionAdapter() {
		if (expressionItemProvider == null) {
			expressionItemProvider = new ExpressionItemProvider(this);
		}

		return expressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.dslCsv.Assign} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssignItemProvider assignItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.dslCsv.Assign}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssignAdapter() {
		if (assignItemProvider == null) {
			assignItemProvider = new AssignItemProvider(this);
		}

		return assignItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.dslCsv.Nop} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NopItemProvider nopItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.dslCsv.Nop}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNopAdapter() {
		if (nopItemProvider == null) {
			nopItemProvider = new NopItemProvider(this);
		}

		return nopItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.dslCsv.LogicalExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogicalExpressionItemProvider logicalExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.dslCsv.LogicalExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogicalExpressionAdapter() {
		if (logicalExpressionItemProvider == null) {
			logicalExpressionItemProvider = new LogicalExpressionItemProvider(this);
		}

		return logicalExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.dslCsv.CompExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompExpressionItemProvider compExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.dslCsv.CompExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompExpressionAdapter() {
		if (compExpressionItemProvider == null) {
			compExpressionItemProvider = new CompExpressionItemProvider(this);
		}

		return compExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.dslCsv.ArithExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArithExpressionItemProvider arithExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.dslCsv.ArithExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArithExpressionAdapter() {
		if (arithExpressionItemProvider == null) {
			arithExpressionItemProvider = new ArithExpressionItemProvider(this);
		}

		return arithExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.dslCsv.SubExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubExpressionItemProvider subExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.dslCsv.SubExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubExpressionAdapter() {
		if (subExpressionItemProvider == null) {
			subExpressionItemProvider = new SubExpressionItemProvider(this);
		}

		return subExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.dslCsv.BaseExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BaseExpressionItemProvider baseExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.dslCsv.BaseExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBaseExpressionAdapter() {
		if (baseExpressionItemProvider == null) {
			baseExpressionItemProvider = new BaseExpressionItemProvider(this);
		}

		return baseExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.dslCsv.Var} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VarItemProvider varItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.dslCsv.Var}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVarAdapter() {
		if (varItemProvider == null) {
			varItemProvider = new VarItemProvider(this);
		}

		return varItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.dslCsv.ConstNat} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstNatItemProvider constNatItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.dslCsv.ConstNat}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstNatAdapter() {
		if (constNatItemProvider == null) {
			constNatItemProvider = new ConstNatItemProvider(this);
		}

		return constNatItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.dslCsv.ConstStr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstStrItemProvider constStrItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.dslCsv.ConstStr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstStrAdapter() {
		if (constStrItemProvider == null) {
			constStrItemProvider = new ConstStrItemProvider(this);
		}

		return constStrItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.dslCsv.Parenthesis} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParenthesisItemProvider parenthesisItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.dslCsv.Parenthesis}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParenthesisAdapter() {
		if (parenthesisItemProvider == null) {
			parenthesisItemProvider = new ParenthesisItemProvider(this);
		}

		return parenthesisItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.dslCsv.ConstVector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstVectorItemProvider constVectorItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.dslCsv.ConstVector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstVectorAdapter() {
		if (constVectorItemProvider == null) {
			constVectorItemProvider = new ConstVectorItemProvider(this);
		}

		return constVectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.dslCsv.FuncCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FuncCallItemProvider funcCallItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.dslCsv.FuncCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFuncCallAdapter() {
		if (funcCallItemProvider == null) {
			funcCallItemProvider = new FuncCallItemProvider(this);
		}

		return funcCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.dslCsv.Count} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CountItemProvider countItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.dslCsv.Count}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCountAdapter() {
		if (countItemProvider == null) {
			countItemProvider = new CountItemProvider(this);
		}

		return countItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.dslCsv.Sort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SortItemProvider sortItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.dslCsv.Sort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSortAdapter() {
		if (sortItemProvider == null) {
			sortItemProvider = new SortItemProvider(this);
		}

		return sortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.dslCsv.Dim} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DimItemProvider dimItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.dslCsv.Dim}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDimAdapter() {
		if (dimItemProvider == null) {
			dimItemProvider = new DimItemProvider(this);
		}

		return dimItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.dslCsv.Print} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrintItemProvider printItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.dslCsv.Print}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrintAdapter() {
		if (printItemProvider == null) {
			printItemProvider = new PrintItemProvider(this);
		}

		return printItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.dslCsv.Features} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeaturesItemProvider featuresItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.dslCsv.Features}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeaturesAdapter() {
		if (featuresItemProvider == null) {
			featuresItemProvider = new FeaturesItemProvider(this);
		}

		return featuresItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.dslCsv.Row} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RowItemProvider rowItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.dslCsv.Row}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRowAdapter() {
		if (rowItemProvider == null) {
			rowItemProvider = new RowItemProvider(this);
		}

		return rowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.dslCsv.Column} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColumnItemProvider columnItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.dslCsv.Column}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColumnAdapter() {
		if (columnItemProvider == null) {
			columnItemProvider = new ColumnItemProvider(this);
		}

		return columnItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.dslCsv.Product} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProductItemProvider productItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.dslCsv.Product}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProductAdapter() {
		if (productItemProvider == null) {
			productItemProvider = new ProductItemProvider(this);
		}

		return productItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.dslCsv.Sum} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SumItemProvider sumItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.dslCsv.Sum}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSumAdapter() {
		if (sumItemProvider == null) {
			sumItemProvider = new SumItemProvider(this);
		}

		return sumItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.dslCsv.Mean} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeanItemProvider meanItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.dslCsv.Mean}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeanAdapter() {
		if (meanItemProvider == null) {
			meanItemProvider = new MeanItemProvider(this);
		}

		return meanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.dslCsv.Filter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FilterItemProvider filterItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.dslCsv.Filter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFilterAdapter() {
		if (filterItemProvider == null) {
			filterItemProvider = new FilterItemProvider(this);
		}

		return filterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.dslCsv.Unselect} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnselectItemProvider unselectItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.dslCsv.Unselect}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnselectAdapter() {
		if (unselectItemProvider == null) {
			unselectItemProvider = new UnselectItemProvider(this);
		}

		return unselectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.dslCsv.Select} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SelectItemProvider selectItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.dslCsv.Select}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSelectAdapter() {
		if (selectItemProvider == null) {
			selectItemProvider = new SelectItemProvider(this);
		}

		return selectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.dslCsv.Save} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SaveItemProvider saveItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.dslCsv.Save}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSaveAdapter() {
		if (saveItemProvider == null) {
			saveItemProvider = new SaveItemProvider(this);
		}

		return saveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.dslCsv.Acquire} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AcquireItemProvider acquireItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.dslCsv.Acquire}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAcquireAdapter() {
		if (acquireItemProvider == null) {
			acquireItemProvider = new AcquireItemProvider(this);
		}

		return acquireItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (programItemProvider != null) programItemProvider.dispose();
		if (expressionItemProvider != null) expressionItemProvider.dispose();
		if (assignItemProvider != null) assignItemProvider.dispose();
		if (nopItemProvider != null) nopItemProvider.dispose();
		if (logicalExpressionItemProvider != null) logicalExpressionItemProvider.dispose();
		if (compExpressionItemProvider != null) compExpressionItemProvider.dispose();
		if (arithExpressionItemProvider != null) arithExpressionItemProvider.dispose();
		if (subExpressionItemProvider != null) subExpressionItemProvider.dispose();
		if (baseExpressionItemProvider != null) baseExpressionItemProvider.dispose();
		if (varItemProvider != null) varItemProvider.dispose();
		if (constNatItemProvider != null) constNatItemProvider.dispose();
		if (constStrItemProvider != null) constStrItemProvider.dispose();
		if (parenthesisItemProvider != null) parenthesisItemProvider.dispose();
		if (constVectorItemProvider != null) constVectorItemProvider.dispose();
		if (funcCallItemProvider != null) funcCallItemProvider.dispose();
		if (countItemProvider != null) countItemProvider.dispose();
		if (sortItemProvider != null) sortItemProvider.dispose();
		if (dimItemProvider != null) dimItemProvider.dispose();
		if (printItemProvider != null) printItemProvider.dispose();
		if (featuresItemProvider != null) featuresItemProvider.dispose();
		if (rowItemProvider != null) rowItemProvider.dispose();
		if (columnItemProvider != null) columnItemProvider.dispose();
		if (productItemProvider != null) productItemProvider.dispose();
		if (sumItemProvider != null) sumItemProvider.dispose();
		if (meanItemProvider != null) meanItemProvider.dispose();
		if (filterItemProvider != null) filterItemProvider.dispose();
		if (unselectItemProvider != null) unselectItemProvider.dispose();
		if (selectItemProvider != null) selectItemProvider.dispose();
		if (saveItemProvider != null) saveItemProvider.dispose();
		if (acquireItemProvider != null) acquireItemProvider.dispose();
	}

}
