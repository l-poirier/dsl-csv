/**
 * generated by Xtext 2.25.0
 */
package fr.irisa.generator;

import fr.irisa.dslCsv.Expression;
import fr.irisa.dslCsv.Program;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class DslCsvGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IteratorExtensions.<EObject>head(resource.getAllContents());
    final Program c = ((Program) _head);
    final ASTtoBash bash = new ASTtoBash();
    InputOutput.<String>println("**********************");
    InputOutput.<String>println("*        BASH        *");
    InputOutput.<String>println("**********************");
    InputOutput.<String>println(bash.eval(c.getExpr()));
    final ASTtoPP pp = new ASTtoPP();
    InputOutput.<String>println("**********************");
    InputOutput.<String>println("*    PRETTY PRINT    *");
    InputOutput.<String>println("**********************");
    InputOutput.<String>println(pp.eval(c.getExpr()));
    InputOutput.<String>println("**********************");
    InputOutput.<String>println("*    INTERPRETER     *");
    InputOutput.<String>println("**********************");
    EList<Expression> _expr = c.getExpr();
    InterpretationContext _interpretationContext = new InterpretationContext();
    Object _eval = ASTtoInterpretation.eval(_expr, _interpretationContext);
    final InterpretationContext i = ((InterpretationContext) _eval);
    System.out.println(i.stdout);
    System.err.println(i.stderr);
  }
}
