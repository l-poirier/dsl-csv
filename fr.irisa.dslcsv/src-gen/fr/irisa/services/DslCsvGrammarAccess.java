/*
 * generated by Xtext 2.25.0
 */
package fr.irisa.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DslCsvGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.DslCsv.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExprExpressionParserRuleCall_0_0 = (RuleCall)cExprAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_1_0 = (RuleCall)cExprAssignment_1_1.eContents().get(0);
		
		//Program:
		//    expr+=Expression (';'expr+=Expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//expr+=Expression (';'expr+=Expression)*
		public Group getGroup() { return cGroup; }
		
		//expr+=Expression
		public Assignment getExprAssignment_0() { return cExprAssignment_0; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_0_0() { return cExprExpressionParserRuleCall_0_0; }
		
		//(';'expr+=Expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//expr+=Expression
		public Assignment getExprAssignment_1_1() { return cExprAssignment_1_1; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_1_0() { return cExprExpressionParserRuleCall_1_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.DslCsv.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFuncCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssignParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLogicalExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNopParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Expression:
		//    FuncCall |
		//    Assign |
		//    LogicalExpression |
		//    Nop
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FuncCall |
		//Assign |
		//LogicalExpression |
		//Nop
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FuncCall
		public RuleCall getFuncCallParserRuleCall_0() { return cFuncCallParserRuleCall_0; }
		
		//Assign
		public RuleCall getAssignParserRuleCall_1() { return cAssignParserRuleCall_1; }
		
		//LogicalExpression
		public RuleCall getLogicalExpressionParserRuleCall_2() { return cLogicalExpressionParserRuleCall_2; }
		
		//Nop
		public RuleCall getNopParserRuleCall_3() { return cNopParserRuleCall_3; }
	}
	public class AssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.DslCsv.Assign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarIDTerminalRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValExpressionParserRuleCall_2_0 = (RuleCall)cValAssignment_2.eContents().get(0);
		
		//Assign:
		//    var=ID '=' val=Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//var=ID '=' val=Expression
		public Group getGroup() { return cGroup; }
		
		//var=ID
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//ID
		public RuleCall getVarIDTerminalRuleCall_0_0() { return cVarIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//val=Expression
		public Assignment getValAssignment_2() { return cValAssignment_2; }
		
		//Expression
		public RuleCall getValExpressionParserRuleCall_2_0() { return cValExpressionParserRuleCall_2_0; }
	}
	public class NopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.DslCsv.Nop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//Nop:
		//    '!'expr=Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'!'expr=Expression
		public Group getGroup() { return cGroup; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }
		
		//expr=Expression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_0() { return cExprExpressionParserRuleCall_1_0; }
	}
	public class LogicalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.DslCsv.LogicalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftCompExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cOpAlternatives_1_0_0 = (Alternatives)cOpAssignment_1_0.eContents().get(0);
		private final Keyword cOpVerticalLineKeyword_1_0_0_0 = (Keyword)cOpAlternatives_1_0_0.eContents().get(0);
		private final Keyword cOpAmpersandKeyword_1_0_0_1 = (Keyword)cOpAlternatives_1_0_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightLogicalExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//LogicalExpression:
		////    left=CompExpression (op+=('|'|'&') right+=LogicalExpression)*
		//    left=CompExpression (op=('|'|'&') right=LogicalExpression)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////    left=CompExpression (op+=('|'|'&') right+=LogicalExpression)*
		//    left=CompExpression (op=('|'|'&') right=LogicalExpression)?
		public Group getGroup() { return cGroup; }
		
		////    left=CompExpression (op+=('|'|'&') right+=LogicalExpression)*
		//    left=CompExpression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//CompExpression
		public RuleCall getLeftCompExpressionParserRuleCall_0_0() { return cLeftCompExpressionParserRuleCall_0_0; }
		
		//(op=('|'|'&') right=LogicalExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//op=('|'|'&')
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }
		
		//('|'|'&')
		public Alternatives getOpAlternatives_1_0_0() { return cOpAlternatives_1_0_0; }
		
		//'|'
		public Keyword getOpVerticalLineKeyword_1_0_0_0() { return cOpVerticalLineKeyword_1_0_0_0; }
		
		//'&'
		public Keyword getOpAmpersandKeyword_1_0_0_1() { return cOpAmpersandKeyword_1_0_0_1; }
		
		//right=LogicalExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//LogicalExpression
		public RuleCall getRightLogicalExpressionParserRuleCall_1_1_0() { return cRightLogicalExpressionParserRuleCall_1_1_0; }
	}
	public class CompExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.DslCsv.CompExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftArithExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cOpAlternatives_1_0_0 = (Alternatives)cOpAssignment_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignKeyword_1_0_0_0 = (Keyword)cOpAlternatives_1_0_0.eContents().get(0);
		private final Keyword cOpGreaterThanSignKeyword_1_0_0_1 = (Keyword)cOpAlternatives_1_0_0.eContents().get(1);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_0_0_2 = (Keyword)cOpAlternatives_1_0_0.eContents().get(2);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_0_0_3 = (Keyword)cOpAlternatives_1_0_0.eContents().get(3);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_0_0_4 = (Keyword)cOpAlternatives_1_0_0.eContents().get(4);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_0_0_5 = (Keyword)cOpAlternatives_1_0_0.eContents().get(5);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightCompExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//CompExpression:
		////    left=ArithExpression (op+=('<'|'>'|'=='|'<='|'>='|'!=') right+=CompExpression)*
		//    left=ArithExpression (op=('<'|'>'|'=='|'<='|'>='|'!=') right=CompExpression)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////    left=ArithExpression (op+=('<'|'>'|'=='|'<='|'>='|'!=') right+=CompExpression)*
		//    left=ArithExpression (op=('<'|'>'|'=='|'<='|'>='|'!=') right=CompExpression)?
		public Group getGroup() { return cGroup; }
		
		////    left=ArithExpression (op+=('<'|'>'|'=='|'<='|'>='|'!=') right+=CompExpression)*
		//    left=ArithExpression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//ArithExpression
		public RuleCall getLeftArithExpressionParserRuleCall_0_0() { return cLeftArithExpressionParserRuleCall_0_0; }
		
		//(op=('<'|'>'|'=='|'<='|'>='|'!=') right=CompExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//op=('<'|'>'|'=='|'<='|'>='|'!=')
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }
		
		//('<'|'>'|'=='|'<='|'>='|'!=')
		public Alternatives getOpAlternatives_1_0_0() { return cOpAlternatives_1_0_0; }
		
		//'<'
		public Keyword getOpLessThanSignKeyword_1_0_0_0() { return cOpLessThanSignKeyword_1_0_0_0; }
		
		//'>'
		public Keyword getOpGreaterThanSignKeyword_1_0_0_1() { return cOpGreaterThanSignKeyword_1_0_0_1; }
		
		//'=='
		public Keyword getOpEqualsSignEqualsSignKeyword_1_0_0_2() { return cOpEqualsSignEqualsSignKeyword_1_0_0_2; }
		
		//'<='
		public Keyword getOpLessThanSignEqualsSignKeyword_1_0_0_3() { return cOpLessThanSignEqualsSignKeyword_1_0_0_3; }
		
		//'>='
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_0_0_4() { return cOpGreaterThanSignEqualsSignKeyword_1_0_0_4; }
		
		//'!='
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_0_0_5() { return cOpExclamationMarkEqualsSignKeyword_1_0_0_5; }
		
		//right=CompExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//CompExpression
		public RuleCall getRightCompExpressionParserRuleCall_1_1_0() { return cRightCompExpressionParserRuleCall_1_1_0; }
	}
	public class ArithExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.DslCsv.ArithExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftSubExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cOpAlternatives_1_0_0 = (Alternatives)cOpAssignment_1_0.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_0_0_0 = (Keyword)cOpAlternatives_1_0_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_0_0_1 = (Keyword)cOpAlternatives_1_0_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightArithExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//ArithExpression:
		////    left=SubExpression (op+=('+'|'-') right+=ArithExpression)*
		//    left=SubExpression (op=('+'|'-') right=ArithExpression)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////    left=SubExpression (op+=('+'|'-') right+=ArithExpression)*
		//    left=SubExpression (op=('+'|'-') right=ArithExpression)?
		public Group getGroup() { return cGroup; }
		
		////    left=SubExpression (op+=('+'|'-') right+=ArithExpression)*
		//    left=SubExpression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//SubExpression
		public RuleCall getLeftSubExpressionParserRuleCall_0_0() { return cLeftSubExpressionParserRuleCall_0_0; }
		
		//(op=('+'|'-') right=ArithExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//op=('+'|'-')
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }
		
		//('+'|'-')
		public Alternatives getOpAlternatives_1_0_0() { return cOpAlternatives_1_0_0; }
		
		//'+'
		public Keyword getOpPlusSignKeyword_1_0_0_0() { return cOpPlusSignKeyword_1_0_0_0; }
		
		//'-'
		public Keyword getOpHyphenMinusKeyword_1_0_0_1() { return cOpHyphenMinusKeyword_1_0_0_1; }
		
		//right=ArithExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//ArithExpression
		public RuleCall getRightArithExpressionParserRuleCall_1_1_0() { return cRightArithExpressionParserRuleCall_1_1_0; }
	}
	public class SubExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.DslCsv.SubExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftBaseExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cOpAlternatives_1_0_0 = (Alternatives)cOpAssignment_1_0.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_0_0_0 = (Keyword)cOpAlternatives_1_0_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_0_0_1 = (Keyword)cOpAlternatives_1_0_0.eContents().get(1);
		private final Keyword cOpPercentSignKeyword_1_0_0_2 = (Keyword)cOpAlternatives_1_0_0.eContents().get(2);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightSubExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//SubExpression:
		////    left=BaseExpression (op+=('*'|'/'|'%') right+=SubExpression)*
		//    left=BaseExpression (op=('*'|'/'|'%') right=SubExpression)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////    left=BaseExpression (op+=('*'|'/'|'%') right+=SubExpression)*
		//    left=BaseExpression (op=('*'|'/'|'%') right=SubExpression)?
		public Group getGroup() { return cGroup; }
		
		////    left=BaseExpression (op+=('*'|'/'|'%') right+=SubExpression)*
		//    left=BaseExpression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//BaseExpression
		public RuleCall getLeftBaseExpressionParserRuleCall_0_0() { return cLeftBaseExpressionParserRuleCall_0_0; }
		
		//(op=('*'|'/'|'%') right=SubExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//op=('*'|'/'|'%')
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }
		
		//('*'|'/'|'%')
		public Alternatives getOpAlternatives_1_0_0() { return cOpAlternatives_1_0_0; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_1_0_0_0() { return cOpAsteriskKeyword_1_0_0_0; }
		
		//'/'
		public Keyword getOpSolidusKeyword_1_0_0_1() { return cOpSolidusKeyword_1_0_0_1; }
		
		//'%'
		public Keyword getOpPercentSignKeyword_1_0_0_2() { return cOpPercentSignKeyword_1_0_0_2; }
		
		//right=SubExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//SubExpression
		public RuleCall getRightSubExpressionParserRuleCall_1_1_0() { return cRightSubExpressionParserRuleCall_1_1_0; }
	}
	public class BaseExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.DslCsv.BaseExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVarParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstNatParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConstStrParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cParenthesisParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cConstVectorParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//BaseExpression:
		//    Var |
		//    ConstNat |
		//    ConstStr |
		//    Parenthesis |
		//    ConstVector
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Var |
		//ConstNat |
		//ConstStr |
		//Parenthesis |
		//ConstVector
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Var
		public RuleCall getVarParserRuleCall_0() { return cVarParserRuleCall_0; }
		
		//ConstNat
		public RuleCall getConstNatParserRuleCall_1() { return cConstNatParserRuleCall_1; }
		
		//ConstStr
		public RuleCall getConstStrParserRuleCall_2() { return cConstStrParserRuleCall_2; }
		
		//Parenthesis
		public RuleCall getParenthesisParserRuleCall_3() { return cParenthesisParserRuleCall_3; }
		
		//ConstVector
		public RuleCall getConstVectorParserRuleCall_4() { return cConstVectorParserRuleCall_4; }
	}
	public class VarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.DslCsv.Var");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVarIDTerminalRuleCall_0 = (RuleCall)cVarAssignment.eContents().get(0);
		
		//Var:
		//    var=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//var=ID
		public Assignment getVarAssignment() { return cVarAssignment; }
		
		//ID
		public RuleCall getVarIDTerminalRuleCall_0() { return cVarIDTerminalRuleCall_0; }
	}
	public class ConstNatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.DslCsv.ConstNat");
		private final Assignment cConstNatAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cConstNatINTTerminalRuleCall_0 = (RuleCall)cConstNatAssignment.eContents().get(0);
		
		//ConstNat:
		//    constNat=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//constNat=INT
		public Assignment getConstNatAssignment() { return cConstNatAssignment; }
		
		//INT
		public RuleCall getConstNatINTTerminalRuleCall_0() { return cConstNatINTTerminalRuleCall_0; }
	}
	public class ConstStrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.DslCsv.ConstStr");
		private final Assignment cConstStrAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cConstStrSTRINGTerminalRuleCall_0 = (RuleCall)cConstStrAssignment.eContents().get(0);
		
		//ConstStr:
		//    constStr=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//constStr=STRING
		public Assignment getConstStrAssignment() { return cConstStrAssignment; }
		
		//STRING
		public RuleCall getConstStrSTRINGTerminalRuleCall_0() { return cConstStrSTRINGTerminalRuleCall_0; }
	}
	public class ParenthesisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.DslCsv.Parenthesis");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Parenthesis:
		//    '(' expr=Expression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' expr=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//expr=Expression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_0() { return cExprExpressionParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ConstVectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.DslCsv.ConstVector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConstVectorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstVectorExpressionParserRuleCall_1_0 = (RuleCall)cConstVectorAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConstVectorAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConstVectorExpressionParserRuleCall_2_1_0 = (RuleCall)cConstVectorAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ConstVector:
		//    '{' constVector+=Expression (',' constVector+=Expression)* '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'{' constVector+=Expression (',' constVector+=Expression)* '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//constVector+=Expression
		public Assignment getConstVectorAssignment_1() { return cConstVectorAssignment_1; }
		
		//Expression
		public RuleCall getConstVectorExpressionParserRuleCall_1_0() { return cConstVectorExpressionParserRuleCall_1_0; }
		
		//(',' constVector+=Expression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//constVector+=Expression
		public Assignment getConstVectorAssignment_2_1() { return cConstVectorAssignment_2_1; }
		
		//Expression
		public RuleCall getConstVectorExpressionParserRuleCall_2_1_0() { return cConstVectorExpressionParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class FuncCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.DslCsv.FuncCall");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAcquireParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSaveParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSelectParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cUnselectParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFilterParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMeanParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSumParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cProductParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cColumnParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cRowParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cFeaturesParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cPrintParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cDimParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cSortParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cCountParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		
		//FuncCall:
		//    Acquire |
		//    Save |
		//    Select |
		//    Unselect |
		//    Filter |
		//    Mean |
		//    Sum |
		//    Product |
		//    Column |
		//    Row |
		//    Features |
		//    Print |
		//    Dim |
		//    Sort |
		//    Count
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Acquire |
		//Save |
		//Select |
		//Unselect |
		//Filter |
		//Mean |
		//Sum |
		//Product |
		//Column |
		//Row |
		//Features |
		//Print |
		//Dim |
		//Sort |
		//Count
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Acquire
		public RuleCall getAcquireParserRuleCall_0() { return cAcquireParserRuleCall_0; }
		
		//Save
		public RuleCall getSaveParserRuleCall_1() { return cSaveParserRuleCall_1; }
		
		//Select
		public RuleCall getSelectParserRuleCall_2() { return cSelectParserRuleCall_2; }
		
		//Unselect
		public RuleCall getUnselectParserRuleCall_3() { return cUnselectParserRuleCall_3; }
		
		//Filter
		public RuleCall getFilterParserRuleCall_4() { return cFilterParserRuleCall_4; }
		
		//Mean
		public RuleCall getMeanParserRuleCall_5() { return cMeanParserRuleCall_5; }
		
		//Sum
		public RuleCall getSumParserRuleCall_6() { return cSumParserRuleCall_6; }
		
		//Product
		public RuleCall getProductParserRuleCall_7() { return cProductParserRuleCall_7; }
		
		//Column
		public RuleCall getColumnParserRuleCall_8() { return cColumnParserRuleCall_8; }
		
		//Row
		public RuleCall getRowParserRuleCall_9() { return cRowParserRuleCall_9; }
		
		//Features
		public RuleCall getFeaturesParserRuleCall_10() { return cFeaturesParserRuleCall_10; }
		
		//Print
		public RuleCall getPrintParserRuleCall_11() { return cPrintParserRuleCall_11; }
		
		//Dim
		public RuleCall getDimParserRuleCall_12() { return cDimParserRuleCall_12; }
		
		//Sort
		public RuleCall getSortParserRuleCall_13() { return cSortParserRuleCall_13; }
		
		//Count
		public RuleCall getCountParserRuleCall_14() { return cCountParserRuleCall_14; }
	}
	public class CountElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.DslCsv.Count");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCountKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVectorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVectorExpressionParserRuleCall_2_0 = (RuleCall)cVectorAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Count:
		//    'Count' '(' vector=Expression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Count' '(' vector=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'Count'
		public Keyword getCountKeyword_0() { return cCountKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//vector=Expression
		public Assignment getVectorAssignment_2() { return cVectorAssignment_2; }
		
		//Expression
		public RuleCall getVectorExpressionParserRuleCall_2_0() { return cVectorExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class SortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.DslCsv.Sort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSortKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFileAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFileExpressionParserRuleCall_2_0 = (RuleCall)cFileAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCriterionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCriterionExpressionParserRuleCall_4_0 = (RuleCall)cCriterionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Sort:
		//    'Sort' '(' file=Expression ',' criterion=Expression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Sort' '(' file=Expression ',' criterion=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'Sort'
		public Keyword getSortKeyword_0() { return cSortKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//file=Expression
		public Assignment getFileAssignment_2() { return cFileAssignment_2; }
		
		//Expression
		public RuleCall getFileExpressionParserRuleCall_2_0() { return cFileExpressionParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//criterion=Expression
		public Assignment getCriterionAssignment_4() { return cCriterionAssignment_4; }
		
		//Expression
		public RuleCall getCriterionExpressionParserRuleCall_4_0() { return cCriterionExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class DimElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.DslCsv.Dim");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDimKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Dim:
		//    'Dim' '(' expr=Expression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Dim' '(' expr=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'Dim'
		public Keyword getDimKeyword_0() { return cDimKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expr=Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class PrintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.DslCsv.Print");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Print:
		//    'Print' '(' expr=Expression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Print' '(' expr=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'Print'
		public Keyword getPrintKeyword_0() { return cPrintKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expr=Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class FeaturesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.DslCsv.Features");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFeaturesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFileAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFileExpressionParserRuleCall_2_0 = (RuleCall)cFileAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Features:
		//    'Features' '(' file=Expression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Features' '(' file=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'Features'
		public Keyword getFeaturesKeyword_0() { return cFeaturesKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//file=Expression
		public Assignment getFileAssignment_2() { return cFileAssignment_2; }
		
		//Expression
		public RuleCall getFileExpressionParserRuleCall_2_0() { return cFileExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class RowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.DslCsv.Row");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFileAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFileExpressionParserRuleCall_2_0 = (RuleCall)cFileAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVectorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVectorExpressionParserRuleCall_4_0 = (RuleCall)cVectorAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Row:
		//    'Row' '(' file=Expression ',' vector=Expression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Row' '(' file=Expression ',' vector=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'Row'
		public Keyword getRowKeyword_0() { return cRowKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//file=Expression
		public Assignment getFileAssignment_2() { return cFileAssignment_2; }
		
		//Expression
		public RuleCall getFileExpressionParserRuleCall_2_0() { return cFileExpressionParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//vector=Expression
		public Assignment getVectorAssignment_4() { return cVectorAssignment_4; }
		
		//Expression
		public RuleCall getVectorExpressionParserRuleCall_4_0() { return cVectorExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.DslCsv.Column");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColumnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFileAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFileExpressionParserRuleCall_2_0 = (RuleCall)cFileAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cColumnNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cColumnNameExpressionParserRuleCall_4_0 = (RuleCall)cColumnNameAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cVectorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cVectorExpressionParserRuleCall_6_0 = (RuleCall)cVectorAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Column:
		//    'Column' '(' file=Expression ',' columnName=Expression ',' vector=Expression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Column' '(' file=Expression ',' columnName=Expression ',' vector=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'Column'
		public Keyword getColumnKeyword_0() { return cColumnKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//file=Expression
		public Assignment getFileAssignment_2() { return cFileAssignment_2; }
		
		//Expression
		public RuleCall getFileExpressionParserRuleCall_2_0() { return cFileExpressionParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//columnName=Expression
		public Assignment getColumnNameAssignment_4() { return cColumnNameAssignment_4; }
		
		//Expression
		public RuleCall getColumnNameExpressionParserRuleCall_4_0() { return cColumnNameExpressionParserRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//vector=Expression
		public Assignment getVectorAssignment_6() { return cVectorAssignment_6; }
		
		//Expression
		public RuleCall getVectorExpressionParserRuleCall_6_0() { return cVectorExpressionParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class ProductElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.DslCsv.Product");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProductKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVectorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVectorExpressionParserRuleCall_2_0 = (RuleCall)cVectorAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Product:
		//    'Product' '(' vector=Expression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Product' '(' vector=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'Product'
		public Keyword getProductKeyword_0() { return cProductKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//vector=Expression
		public Assignment getVectorAssignment_2() { return cVectorAssignment_2; }
		
		//Expression
		public RuleCall getVectorExpressionParserRuleCall_2_0() { return cVectorExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class SumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.DslCsv.Sum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVectorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVectorExpressionParserRuleCall_2_0 = (RuleCall)cVectorAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Sum:
		//    'Sum' '(' vector=Expression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Sum' '(' vector=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'Sum'
		public Keyword getSumKeyword_0() { return cSumKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//vector=Expression
		public Assignment getVectorAssignment_2() { return cVectorAssignment_2; }
		
		//Expression
		public RuleCall getVectorExpressionParserRuleCall_2_0() { return cVectorExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class MeanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.DslCsv.Mean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMeanKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVectorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVectorExpressionParserRuleCall_2_0 = (RuleCall)cVectorAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Mean:
		//    'Mean' '(' vector=Expression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Mean' '(' vector=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'Mean'
		public Keyword getMeanKeyword_0() { return cMeanKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//vector=Expression
		public Assignment getVectorAssignment_2() { return cVectorAssignment_2; }
		
		//Expression
		public RuleCall getVectorExpressionParserRuleCall_2_0() { return cVectorExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class FilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.DslCsv.Filter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFilterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFileAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFileExpressionParserRuleCall_2_0 = (RuleCall)cFileAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCondAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCondExpressionParserRuleCall_4_0 = (RuleCall)cCondAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Filter:
		//    'Filter' '(' file=Expression ',' cond=Expression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Filter' '(' file=Expression ',' cond=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'Filter'
		public Keyword getFilterKeyword_0() { return cFilterKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//file=Expression
		public Assignment getFileAssignment_2() { return cFileAssignment_2; }
		
		//Expression
		public RuleCall getFileExpressionParserRuleCall_2_0() { return cFileExpressionParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//cond=Expression
		public Assignment getCondAssignment_4() { return cCondAssignment_4; }
		
		//Expression
		public RuleCall getCondExpressionParserRuleCall_4_0() { return cCondExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class UnselectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.DslCsv.Unselect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnselectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFileAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFileExpressionParserRuleCall_2_0 = (RuleCall)cFileAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeaturesExpressionParserRuleCall_4_0 = (RuleCall)cFeaturesAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Unselect:
		//    'Unselect' '(' file=Expression ',' features=Expression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Unselect' '(' file=Expression ',' features=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'Unselect'
		public Keyword getUnselectKeyword_0() { return cUnselectKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//file=Expression
		public Assignment getFileAssignment_2() { return cFileAssignment_2; }
		
		//Expression
		public RuleCall getFileExpressionParserRuleCall_2_0() { return cFileExpressionParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//features=Expression
		public Assignment getFeaturesAssignment_4() { return cFeaturesAssignment_4; }
		
		//Expression
		public RuleCall getFeaturesExpressionParserRuleCall_4_0() { return cFeaturesExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class SelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.DslCsv.Select");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFileAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFileExpressionParserRuleCall_2_0 = (RuleCall)cFileAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeaturesExpressionParserRuleCall_4_0 = (RuleCall)cFeaturesAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Select:
		//    'Select' '(' file=Expression ',' features=Expression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Select' '(' file=Expression ',' features=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'Select'
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//file=Expression
		public Assignment getFileAssignment_2() { return cFileAssignment_2; }
		
		//Expression
		public RuleCall getFileExpressionParserRuleCall_2_0() { return cFileExpressionParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//features=Expression
		public Assignment getFeaturesAssignment_4() { return cFeaturesAssignment_4; }
		
		//Expression
		public RuleCall getFeaturesExpressionParserRuleCall_4_0() { return cFeaturesExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class SaveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.DslCsv.Save");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSaveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFilenameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFilenameExpressionParserRuleCall_2_0 = (RuleCall)cFilenameAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFileAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFileExpressionParserRuleCall_4_0 = (RuleCall)cFileAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSepAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSepExpressionParserRuleCall_6_0 = (RuleCall)cSepAssignment_6.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cSaveHeaderAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cSaveHeaderExpressionParserRuleCall_8_0 = (RuleCall)cSaveHeaderAssignment_8.eContents().get(0);
		private final Keyword cCommaKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cSaveIDAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cSaveIDExpressionParserRuleCall_10_0 = (RuleCall)cSaveIDAssignment_10.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Save:
		//    'Save' '(' filename=Expression ',' file=Expression ',' sep=Expression ',' saveHeader=Expression ',' saveID=Expression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Save' '(' filename=Expression ',' file=Expression ',' sep=Expression ',' saveHeader=Expression ',' saveID=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'Save'
		public Keyword getSaveKeyword_0() { return cSaveKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//filename=Expression
		public Assignment getFilenameAssignment_2() { return cFilenameAssignment_2; }
		
		//Expression
		public RuleCall getFilenameExpressionParserRuleCall_2_0() { return cFilenameExpressionParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//file=Expression
		public Assignment getFileAssignment_4() { return cFileAssignment_4; }
		
		//Expression
		public RuleCall getFileExpressionParserRuleCall_4_0() { return cFileExpressionParserRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//sep=Expression
		public Assignment getSepAssignment_6() { return cSepAssignment_6; }
		
		//Expression
		public RuleCall getSepExpressionParserRuleCall_6_0() { return cSepExpressionParserRuleCall_6_0; }
		
		//','
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }
		
		//saveHeader=Expression
		public Assignment getSaveHeaderAssignment_8() { return cSaveHeaderAssignment_8; }
		
		//Expression
		public RuleCall getSaveHeaderExpressionParserRuleCall_8_0() { return cSaveHeaderExpressionParserRuleCall_8_0; }
		
		//','
		public Keyword getCommaKeyword_9() { return cCommaKeyword_9; }
		
		//saveID=Expression
		public Assignment getSaveIDAssignment_10() { return cSaveIDAssignment_10; }
		
		//Expression
		public RuleCall getSaveIDExpressionParserRuleCall_10_0() { return cSaveIDExpressionParserRuleCall_10_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_11() { return cRightParenthesisKeyword_11; }
	}
	public class AcquireElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.DslCsv.Acquire");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAcquireKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPathAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPathExpressionParserRuleCall_2_0 = (RuleCall)cPathAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSepAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSepExpressionParserRuleCall_4_0 = (RuleCall)cSepAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cHasHeaderAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cHasHeaderExpressionParserRuleCall_6_0 = (RuleCall)cHasHeaderAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Acquire:
		//    'Acquire' '(' path=Expression ',' sep=Expression ',' hasHeader=Expression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Acquire' '(' path=Expression ',' sep=Expression ',' hasHeader=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'Acquire'
		public Keyword getAcquireKeyword_0() { return cAcquireKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//path=Expression
		public Assignment getPathAssignment_2() { return cPathAssignment_2; }
		
		//Expression
		public RuleCall getPathExpressionParserRuleCall_2_0() { return cPathExpressionParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//sep=Expression
		public Assignment getSepAssignment_4() { return cSepAssignment_4; }
		
		//Expression
		public RuleCall getSepExpressionParserRuleCall_4_0() { return cSepExpressionParserRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//hasHeader=Expression
		public Assignment getHasHeaderAssignment_6() { return cHasHeaderAssignment_6; }
		
		//Expression
		public RuleCall getHasHeaderExpressionParserRuleCall_6_0() { return cHasHeaderExpressionParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	
	
	private final ProgramElements pProgram;
	private final ExpressionElements pExpression;
	private final AssignElements pAssign;
	private final NopElements pNop;
	private final LogicalExpressionElements pLogicalExpression;
	private final CompExpressionElements pCompExpression;
	private final ArithExpressionElements pArithExpression;
	private final SubExpressionElements pSubExpression;
	private final BaseExpressionElements pBaseExpression;
	private final VarElements pVar;
	private final ConstNatElements pConstNat;
	private final ConstStrElements pConstStr;
	private final ParenthesisElements pParenthesis;
	private final ConstVectorElements pConstVector;
	private final FuncCallElements pFuncCall;
	private final CountElements pCount;
	private final SortElements pSort;
	private final DimElements pDim;
	private final PrintElements pPrint;
	private final FeaturesElements pFeatures;
	private final RowElements pRow;
	private final ColumnElements pColumn;
	private final ProductElements pProduct;
	private final SumElements pSum;
	private final MeanElements pMean;
	private final FilterElements pFilter;
	private final UnselectElements pUnselect;
	private final SelectElements pSelect;
	private final SaveElements pSave;
	private final AcquireElements pAcquire;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DslCsvGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pExpression = new ExpressionElements();
		this.pAssign = new AssignElements();
		this.pNop = new NopElements();
		this.pLogicalExpression = new LogicalExpressionElements();
		this.pCompExpression = new CompExpressionElements();
		this.pArithExpression = new ArithExpressionElements();
		this.pSubExpression = new SubExpressionElements();
		this.pBaseExpression = new BaseExpressionElements();
		this.pVar = new VarElements();
		this.pConstNat = new ConstNatElements();
		this.pConstStr = new ConstStrElements();
		this.pParenthesis = new ParenthesisElements();
		this.pConstVector = new ConstVectorElements();
		this.pFuncCall = new FuncCallElements();
		this.pCount = new CountElements();
		this.pSort = new SortElements();
		this.pDim = new DimElements();
		this.pPrint = new PrintElements();
		this.pFeatures = new FeaturesElements();
		this.pRow = new RowElements();
		this.pColumn = new ColumnElements();
		this.pProduct = new ProductElements();
		this.pSum = new SumElements();
		this.pMean = new MeanElements();
		this.pFilter = new FilterElements();
		this.pUnselect = new UnselectElements();
		this.pSelect = new SelectElements();
		this.pSave = new SaveElements();
		this.pAcquire = new AcquireElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.irisa.DslCsv".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//    expr+=Expression (';'expr+=Expression)*;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Expression:
	//    FuncCall |
	//    Assign |
	//    LogicalExpression |
	//    Nop
	//;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Assign:
	//    var=ID '=' val=Expression
	//;
	public AssignElements getAssignAccess() {
		return pAssign;
	}
	
	public ParserRule getAssignRule() {
		return getAssignAccess().getRule();
	}
	
	//Nop:
	//    '!'expr=Expression
	//;
	public NopElements getNopAccess() {
		return pNop;
	}
	
	public ParserRule getNopRule() {
		return getNopAccess().getRule();
	}
	
	//LogicalExpression:
	////    left=CompExpression (op+=('|'|'&') right+=LogicalExpression)*
	//    left=CompExpression (op=('|'|'&') right=LogicalExpression)?
	//;
	public LogicalExpressionElements getLogicalExpressionAccess() {
		return pLogicalExpression;
	}
	
	public ParserRule getLogicalExpressionRule() {
		return getLogicalExpressionAccess().getRule();
	}
	
	//CompExpression:
	////    left=ArithExpression (op+=('<'|'>'|'=='|'<='|'>='|'!=') right+=CompExpression)*
	//    left=ArithExpression (op=('<'|'>'|'=='|'<='|'>='|'!=') right=CompExpression)?
	//;
	public CompExpressionElements getCompExpressionAccess() {
		return pCompExpression;
	}
	
	public ParserRule getCompExpressionRule() {
		return getCompExpressionAccess().getRule();
	}
	
	//ArithExpression:
	////    left=SubExpression (op+=('+'|'-') right+=ArithExpression)*
	//    left=SubExpression (op=('+'|'-') right=ArithExpression)?
	//;
	public ArithExpressionElements getArithExpressionAccess() {
		return pArithExpression;
	}
	
	public ParserRule getArithExpressionRule() {
		return getArithExpressionAccess().getRule();
	}
	
	//SubExpression:
	////    left=BaseExpression (op+=('*'|'/'|'%') right+=SubExpression)*
	//    left=BaseExpression (op=('*'|'/'|'%') right=SubExpression)?
	//;
	public SubExpressionElements getSubExpressionAccess() {
		return pSubExpression;
	}
	
	public ParserRule getSubExpressionRule() {
		return getSubExpressionAccess().getRule();
	}
	
	//BaseExpression:
	//    Var |
	//    ConstNat |
	//    ConstStr |
	//    Parenthesis |
	//    ConstVector
	//;
	public BaseExpressionElements getBaseExpressionAccess() {
		return pBaseExpression;
	}
	
	public ParserRule getBaseExpressionRule() {
		return getBaseExpressionAccess().getRule();
	}
	
	//Var:
	//    var=ID
	//;
	public VarElements getVarAccess() {
		return pVar;
	}
	
	public ParserRule getVarRule() {
		return getVarAccess().getRule();
	}
	
	//ConstNat:
	//    constNat=INT
	//;
	public ConstNatElements getConstNatAccess() {
		return pConstNat;
	}
	
	public ParserRule getConstNatRule() {
		return getConstNatAccess().getRule();
	}
	
	//ConstStr:
	//    constStr=STRING
	//;
	public ConstStrElements getConstStrAccess() {
		return pConstStr;
	}
	
	public ParserRule getConstStrRule() {
		return getConstStrAccess().getRule();
	}
	
	//Parenthesis:
	//    '(' expr=Expression ')'
	//;
	public ParenthesisElements getParenthesisAccess() {
		return pParenthesis;
	}
	
	public ParserRule getParenthesisRule() {
		return getParenthesisAccess().getRule();
	}
	
	//ConstVector:
	//    '{' constVector+=Expression (',' constVector+=Expression)* '}'
	//;
	public ConstVectorElements getConstVectorAccess() {
		return pConstVector;
	}
	
	public ParserRule getConstVectorRule() {
		return getConstVectorAccess().getRule();
	}
	
	//FuncCall:
	//    Acquire |
	//    Save |
	//    Select |
	//    Unselect |
	//    Filter |
	//    Mean |
	//    Sum |
	//    Product |
	//    Column |
	//    Row |
	//    Features |
	//    Print |
	//    Dim |
	//    Sort |
	//    Count
	//;
	public FuncCallElements getFuncCallAccess() {
		return pFuncCall;
	}
	
	public ParserRule getFuncCallRule() {
		return getFuncCallAccess().getRule();
	}
	
	//Count:
	//    'Count' '(' vector=Expression ')'
	//;
	public CountElements getCountAccess() {
		return pCount;
	}
	
	public ParserRule getCountRule() {
		return getCountAccess().getRule();
	}
	
	//Sort:
	//    'Sort' '(' file=Expression ',' criterion=Expression ')'
	//;
	public SortElements getSortAccess() {
		return pSort;
	}
	
	public ParserRule getSortRule() {
		return getSortAccess().getRule();
	}
	
	//Dim:
	//    'Dim' '(' expr=Expression ')'
	//;
	public DimElements getDimAccess() {
		return pDim;
	}
	
	public ParserRule getDimRule() {
		return getDimAccess().getRule();
	}
	
	//Print:
	//    'Print' '(' expr=Expression ')'
	//;
	public PrintElements getPrintAccess() {
		return pPrint;
	}
	
	public ParserRule getPrintRule() {
		return getPrintAccess().getRule();
	}
	
	//Features:
	//    'Features' '(' file=Expression ')'
	//;
	public FeaturesElements getFeaturesAccess() {
		return pFeatures;
	}
	
	public ParserRule getFeaturesRule() {
		return getFeaturesAccess().getRule();
	}
	
	//Row:
	//    'Row' '(' file=Expression ',' vector=Expression ')'
	//;
	public RowElements getRowAccess() {
		return pRow;
	}
	
	public ParserRule getRowRule() {
		return getRowAccess().getRule();
	}
	
	//Column:
	//    'Column' '(' file=Expression ',' columnName=Expression ',' vector=Expression ')'
	//;
	public ColumnElements getColumnAccess() {
		return pColumn;
	}
	
	public ParserRule getColumnRule() {
		return getColumnAccess().getRule();
	}
	
	//Product:
	//    'Product' '(' vector=Expression ')'
	//;
	public ProductElements getProductAccess() {
		return pProduct;
	}
	
	public ParserRule getProductRule() {
		return getProductAccess().getRule();
	}
	
	//Sum:
	//    'Sum' '(' vector=Expression ')'
	//;
	public SumElements getSumAccess() {
		return pSum;
	}
	
	public ParserRule getSumRule() {
		return getSumAccess().getRule();
	}
	
	//Mean:
	//    'Mean' '(' vector=Expression ')'
	//;
	public MeanElements getMeanAccess() {
		return pMean;
	}
	
	public ParserRule getMeanRule() {
		return getMeanAccess().getRule();
	}
	
	//Filter:
	//    'Filter' '(' file=Expression ',' cond=Expression ')'
	//;
	public FilterElements getFilterAccess() {
		return pFilter;
	}
	
	public ParserRule getFilterRule() {
		return getFilterAccess().getRule();
	}
	
	//Unselect:
	//    'Unselect' '(' file=Expression ',' features=Expression ')'
	//;
	public UnselectElements getUnselectAccess() {
		return pUnselect;
	}
	
	public ParserRule getUnselectRule() {
		return getUnselectAccess().getRule();
	}
	
	//Select:
	//    'Select' '(' file=Expression ',' features=Expression ')'
	//;
	public SelectElements getSelectAccess() {
		return pSelect;
	}
	
	public ParserRule getSelectRule() {
		return getSelectAccess().getRule();
	}
	
	//Save:
	//    'Save' '(' filename=Expression ',' file=Expression ',' sep=Expression ',' saveHeader=Expression ',' saveID=Expression ')'
	//;
	public SaveElements getSaveAccess() {
		return pSave;
	}
	
	public ParserRule getSaveRule() {
		return getSaveAccess().getRule();
	}
	
	//Acquire:
	//    'Acquire' '(' path=Expression ',' sep=Expression ',' hasHeader=Expression ')'
	//;
	public AcquireElements getAcquireAccess() {
		return pAcquire;
	}
	
	public ParserRule getAcquireRule() {
		return getAcquireAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
