/*
 * generated by Xtext 2.25.0
 */
grammar InternalDslCsv;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package fr.irisa.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.irisa.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.irisa.services.DslCsvGrammarAccess;

}

@parser::members {

 	private DslCsvGrammarAccess grammarAccess;

    public InternalDslCsvParser(TokenStream input, DslCsvGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected DslCsvGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getExprExpressionParserRuleCall_0_0());
				}
				lv_expr_0_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					add(
						$current,
						"expr",
						lv_expr_0_0,
						"fr.irisa.DslCsv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=';'
			{
				newLeafNode(otherlv_1, grammarAccess.getProgramAccess().getSemicolonKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getProgramAccess().getExprExpressionParserRuleCall_1_1_0());
					}
					lv_expr_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProgramRule());
						}
						add(
							$current,
							"expr",
							lv_expr_2_0,
							"fr.irisa.DslCsv.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getFuncCallParserRuleCall_0());
		}
		this_FuncCall_0=ruleFuncCall
		{
			$current = $this_FuncCall_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getAssignParserRuleCall_1());
		}
		this_Assign_1=ruleAssign
		{
			$current = $this_Assign_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getLogicalExpressionParserRuleCall_2());
		}
		this_LogicalExpression_2=ruleLogicalExpression
		{
			$current = $this_LogicalExpression_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getNopParserRuleCall_3());
		}
		this_Nop_3=ruleNop
		{
			$current = $this_Nop_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAssign
entryRuleAssign returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignRule()); }
	iv_ruleAssign=ruleAssign
	{ $current=$iv_ruleAssign.current; }
	EOF;

// Rule Assign
ruleAssign returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_var_0_0=RULE_ID
				{
					newLeafNode(lv_var_0_0, grammarAccess.getAssignAccess().getVarIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssignRule());
					}
					setWithLastConsumed(
						$current,
						"var",
						lv_var_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getAssignAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignAccess().getValExpressionParserRuleCall_2_0());
				}
				lv_val_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignRule());
					}
					set(
						$current,
						"val",
						lv_val_2_0,
						"fr.irisa.DslCsv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleNop
entryRuleNop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNopRule()); }
	iv_ruleNop=ruleNop
	{ $current=$iv_ruleNop.current; }
	EOF;

// Rule Nop
ruleNop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='!'
		{
			newLeafNode(otherlv_0, grammarAccess.getNopAccess().getExclamationMarkKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNopAccess().getExprExpressionParserRuleCall_1_0());
				}
				lv_expr_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNopRule());
					}
					set(
						$current,
						"expr",
						lv_expr_1_0,
						"fr.irisa.DslCsv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLogicalExpression
entryRuleLogicalExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicalExpressionRule()); }
	iv_ruleLogicalExpression=ruleLogicalExpression
	{ $current=$iv_ruleLogicalExpression.current; }
	EOF;

// Rule LogicalExpression
ruleLogicalExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getLogicalExpressionAccess().getLeftCompExpressionParserRuleCall_0_0());
				}
				lv_left_0_0=ruleCompExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLogicalExpressionRule());
					}
					set(
						$current,
						"left",
						lv_left_0_0,
						"fr.irisa.DslCsv.CompExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					(
						lv_op_1_1='|'
						{
							newLeafNode(lv_op_1_1, grammarAccess.getLogicalExpressionAccess().getOpVerticalLineKeyword_1_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getLogicalExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_1_1, null);
						}
						    |
						lv_op_1_2='&'
						{
							newLeafNode(lv_op_1_2, grammarAccess.getLogicalExpressionAccess().getOpAmpersandKeyword_1_0_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getLogicalExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_1_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getLogicalExpressionAccess().getRightLogicalExpressionParserRuleCall_1_1_0());
					}
					lv_right_2_0=ruleLogicalExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogicalExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_2_0,
							"fr.irisa.DslCsv.LogicalExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleCompExpression
entryRuleCompExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompExpressionRule()); }
	iv_ruleCompExpression=ruleCompExpression
	{ $current=$iv_ruleCompExpression.current; }
	EOF;

// Rule CompExpression
ruleCompExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCompExpressionAccess().getLeftArithExpressionParserRuleCall_0_0());
				}
				lv_left_0_0=ruleArithExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompExpressionRule());
					}
					set(
						$current,
						"left",
						lv_left_0_0,
						"fr.irisa.DslCsv.ArithExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					(
						lv_op_1_1='<'
						{
							newLeafNode(lv_op_1_1, grammarAccess.getCompExpressionAccess().getOpLessThanSignKeyword_1_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCompExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_1_1, null);
						}
						    |
						lv_op_1_2='>'
						{
							newLeafNode(lv_op_1_2, grammarAccess.getCompExpressionAccess().getOpGreaterThanSignKeyword_1_0_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCompExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_1_2, null);
						}
						    |
						lv_op_1_3='=='
						{
							newLeafNode(lv_op_1_3, grammarAccess.getCompExpressionAccess().getOpEqualsSignEqualsSignKeyword_1_0_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCompExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_1_3, null);
						}
						    |
						lv_op_1_4='<='
						{
							newLeafNode(lv_op_1_4, grammarAccess.getCompExpressionAccess().getOpLessThanSignEqualsSignKeyword_1_0_0_3());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCompExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_1_4, null);
						}
						    |
						lv_op_1_5='>='
						{
							newLeafNode(lv_op_1_5, grammarAccess.getCompExpressionAccess().getOpGreaterThanSignEqualsSignKeyword_1_0_0_4());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCompExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_1_5, null);
						}
						    |
						lv_op_1_6='!='
						{
							newLeafNode(lv_op_1_6, grammarAccess.getCompExpressionAccess().getOpExclamationMarkEqualsSignKeyword_1_0_0_5());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCompExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_1_6, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getCompExpressionAccess().getRightCompExpressionParserRuleCall_1_1_0());
					}
					lv_right_2_0=ruleCompExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCompExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_2_0,
							"fr.irisa.DslCsv.CompExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleArithExpression
entryRuleArithExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArithExpressionRule()); }
	iv_ruleArithExpression=ruleArithExpression
	{ $current=$iv_ruleArithExpression.current; }
	EOF;

// Rule ArithExpression
ruleArithExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getArithExpressionAccess().getLeftSubExpressionParserRuleCall_0_0());
				}
				lv_left_0_0=ruleSubExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArithExpressionRule());
					}
					set(
						$current,
						"left",
						lv_left_0_0,
						"fr.irisa.DslCsv.SubExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					(
						lv_op_1_1='+'
						{
							newLeafNode(lv_op_1_1, grammarAccess.getArithExpressionAccess().getOpPlusSignKeyword_1_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getArithExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_1_1, null);
						}
						    |
						lv_op_1_2='-'
						{
							newLeafNode(lv_op_1_2, grammarAccess.getArithExpressionAccess().getOpHyphenMinusKeyword_1_0_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getArithExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_1_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getArithExpressionAccess().getRightArithExpressionParserRuleCall_1_1_0());
					}
					lv_right_2_0=ruleArithExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArithExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_2_0,
							"fr.irisa.DslCsv.ArithExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleSubExpression
entryRuleSubExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubExpressionRule()); }
	iv_ruleSubExpression=ruleSubExpression
	{ $current=$iv_ruleSubExpression.current; }
	EOF;

// Rule SubExpression
ruleSubExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSubExpressionAccess().getLeftBaseExpressionParserRuleCall_0_0());
				}
				lv_left_0_0=ruleBaseExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubExpressionRule());
					}
					set(
						$current,
						"left",
						lv_left_0_0,
						"fr.irisa.DslCsv.BaseExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					(
						lv_op_1_1='*'
						{
							newLeafNode(lv_op_1_1, grammarAccess.getSubExpressionAccess().getOpAsteriskKeyword_1_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getSubExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_1_1, null);
						}
						    |
						lv_op_1_2='/'
						{
							newLeafNode(lv_op_1_2, grammarAccess.getSubExpressionAccess().getOpSolidusKeyword_1_0_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getSubExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_1_2, null);
						}
						    |
						lv_op_1_3='%'
						{
							newLeafNode(lv_op_1_3, grammarAccess.getSubExpressionAccess().getOpPercentSignKeyword_1_0_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getSubExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_1_3, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSubExpressionAccess().getRightSubExpressionParserRuleCall_1_1_0());
					}
					lv_right_2_0=ruleSubExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSubExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_2_0,
							"fr.irisa.DslCsv.SubExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleBaseExpression
entryRuleBaseExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBaseExpressionRule()); }
	iv_ruleBaseExpression=ruleBaseExpression
	{ $current=$iv_ruleBaseExpression.current; }
	EOF;

// Rule BaseExpression
ruleBaseExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBaseExpressionAccess().getVarParserRuleCall_0());
		}
		this_Var_0=ruleVar
		{
			$current = $this_Var_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBaseExpressionAccess().getConstNatParserRuleCall_1());
		}
		this_ConstNat_1=ruleConstNat
		{
			$current = $this_ConstNat_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBaseExpressionAccess().getConstStrParserRuleCall_2());
		}
		this_ConstStr_2=ruleConstStr
		{
			$current = $this_ConstStr_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBaseExpressionAccess().getParenthesisParserRuleCall_3());
		}
		this_Parenthesis_3=ruleParenthesis
		{
			$current = $this_Parenthesis_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBaseExpressionAccess().getConstVectorParserRuleCall_4());
		}
		this_ConstVector_4=ruleConstVector
		{
			$current = $this_ConstVector_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleVar
entryRuleVar returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarRule()); }
	iv_ruleVar=ruleVar
	{ $current=$iv_ruleVar.current; }
	EOF;

// Rule Var
ruleVar returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_var_0_0=RULE_ID
			{
				newLeafNode(lv_var_0_0, grammarAccess.getVarAccess().getVarIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVarRule());
				}
				setWithLastConsumed(
					$current,
					"var",
					lv_var_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleConstNat
entryRuleConstNat returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstNatRule()); }
	iv_ruleConstNat=ruleConstNat
	{ $current=$iv_ruleConstNat.current; }
	EOF;

// Rule ConstNat
ruleConstNat returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_constNat_0_0=RULE_INT
			{
				newLeafNode(lv_constNat_0_0, grammarAccess.getConstNatAccess().getConstNatINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getConstNatRule());
				}
				setWithLastConsumed(
					$current,
					"constNat",
					lv_constNat_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleConstStr
entryRuleConstStr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstStrRule()); }
	iv_ruleConstStr=ruleConstStr
	{ $current=$iv_ruleConstStr.current; }
	EOF;

// Rule ConstStr
ruleConstStr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_constStr_0_0=RULE_STRING
			{
				newLeafNode(lv_constStr_0_0, grammarAccess.getConstStrAccess().getConstStrSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getConstStrRule());
				}
				setWithLastConsumed(
					$current,
					"constStr",
					lv_constStr_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleParenthesis
entryRuleParenthesis returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParenthesisRule()); }
	iv_ruleParenthesis=ruleParenthesis
	{ $current=$iv_ruleParenthesis.current; }
	EOF;

// Rule Parenthesis
ruleParenthesis returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getParenthesisAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParenthesisAccess().getExprExpressionParserRuleCall_1_0());
				}
				lv_expr_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParenthesisRule());
					}
					set(
						$current,
						"expr",
						lv_expr_1_0,
						"fr.irisa.DslCsv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getParenthesisAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleConstVector
entryRuleConstVector returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstVectorRule()); }
	iv_ruleConstVector=ruleConstVector
	{ $current=$iv_ruleConstVector.current; }
	EOF;

// Rule ConstVector
ruleConstVector returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstVectorAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstVectorAccess().getConstVectorExpressionParserRuleCall_1_0());
				}
				lv_constVector_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstVectorRule());
					}
					add(
						$current,
						"constVector",
						lv_constVector_1_0,
						"fr.irisa.DslCsv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getConstVectorAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConstVectorAccess().getConstVectorExpressionParserRuleCall_2_1_0());
					}
					lv_constVector_3_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstVectorRule());
						}
						add(
							$current,
							"constVector",
							lv_constVector_3_0,
							"fr.irisa.DslCsv.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getConstVectorAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleFuncCall
entryRuleFuncCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFuncCallRule()); }
	iv_ruleFuncCall=ruleFuncCall
	{ $current=$iv_ruleFuncCall.current; }
	EOF;

// Rule FuncCall
ruleFuncCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFuncCallAccess().getAcquireParserRuleCall_0());
		}
		this_Acquire_0=ruleAcquire
		{
			$current = $this_Acquire_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFuncCallAccess().getSaveParserRuleCall_1());
		}
		this_Save_1=ruleSave
		{
			$current = $this_Save_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFuncCallAccess().getSelectParserRuleCall_2());
		}
		this_Select_2=ruleSelect
		{
			$current = $this_Select_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFuncCallAccess().getUnselectParserRuleCall_3());
		}
		this_Unselect_3=ruleUnselect
		{
			$current = $this_Unselect_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFuncCallAccess().getFilterParserRuleCall_4());
		}
		this_Filter_4=ruleFilter
		{
			$current = $this_Filter_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFuncCallAccess().getMeanParserRuleCall_5());
		}
		this_Mean_5=ruleMean
		{
			$current = $this_Mean_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFuncCallAccess().getSumParserRuleCall_6());
		}
		this_Sum_6=ruleSum
		{
			$current = $this_Sum_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFuncCallAccess().getProductParserRuleCall_7());
		}
		this_Product_7=ruleProduct
		{
			$current = $this_Product_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFuncCallAccess().getColumnParserRuleCall_8());
		}
		this_Column_8=ruleColumn
		{
			$current = $this_Column_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFuncCallAccess().getRowParserRuleCall_9());
		}
		this_Row_9=ruleRow
		{
			$current = $this_Row_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFuncCallAccess().getFeaturesParserRuleCall_10());
		}
		this_Features_10=ruleFeatures
		{
			$current = $this_Features_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFuncCallAccess().getPrintParserRuleCall_11());
		}
		this_Print_11=rulePrint
		{
			$current = $this_Print_11.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFuncCallAccess().getDimParserRuleCall_12());
		}
		this_Dim_12=ruleDim
		{
			$current = $this_Dim_12.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFuncCallAccess().getSortParserRuleCall_13());
		}
		this_Sort_13=ruleSort
		{
			$current = $this_Sort_13.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFuncCallAccess().getCountParserRuleCall_14());
		}
		this_Count_14=ruleCount
		{
			$current = $this_Count_14.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCount
entryRuleCount returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCountRule()); }
	iv_ruleCount=ruleCount
	{ $current=$iv_ruleCount.current; }
	EOF;

// Rule Count
ruleCount returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Count'
		{
			newLeafNode(otherlv_0, grammarAccess.getCountAccess().getCountKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getCountAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCountAccess().getVectorExpressionParserRuleCall_2_0());
				}
				lv_vector_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCountRule());
					}
					set(
						$current,
						"vector",
						lv_vector_2_0,
						"fr.irisa.DslCsv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getCountAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleSort
entryRuleSort returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSortRule()); }
	iv_ruleSort=ruleSort
	{ $current=$iv_ruleSort.current; }
	EOF;

// Rule Sort
ruleSort returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Sort'
		{
			newLeafNode(otherlv_0, grammarAccess.getSortAccess().getSortKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getSortAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSortAccess().getFileExpressionParserRuleCall_2_0());
				}
				lv_file_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSortRule());
					}
					set(
						$current,
						"file",
						lv_file_2_0,
						"fr.irisa.DslCsv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getSortAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSortAccess().getCriterionExpressionParserRuleCall_4_0());
				}
				lv_criterion_4_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSortRule());
					}
					set(
						$current,
						"criterion",
						lv_criterion_4_0,
						"fr.irisa.DslCsv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getSortAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleDim
entryRuleDim returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDimRule()); }
	iv_ruleDim=ruleDim
	{ $current=$iv_ruleDim.current; }
	EOF;

// Rule Dim
ruleDim returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Dim'
		{
			newLeafNode(otherlv_0, grammarAccess.getDimAccess().getDimKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getDimAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDimAccess().getExprExpressionParserRuleCall_2_0());
				}
				lv_expr_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDimRule());
					}
					set(
						$current,
						"expr",
						lv_expr_2_0,
						"fr.irisa.DslCsv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getDimAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRulePrint
entryRulePrint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrintRule()); }
	iv_rulePrint=rulePrint
	{ $current=$iv_rulePrint.current; }
	EOF;

// Rule Print
rulePrint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Print'
		{
			newLeafNode(otherlv_0, grammarAccess.getPrintAccess().getPrintKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getPrintAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPrintAccess().getExprExpressionParserRuleCall_2_0());
				}
				lv_expr_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrintRule());
					}
					set(
						$current,
						"expr",
						lv_expr_2_0,
						"fr.irisa.DslCsv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getPrintAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleFeatures
entryRuleFeatures returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFeaturesRule()); }
	iv_ruleFeatures=ruleFeatures
	{ $current=$iv_ruleFeatures.current; }
	EOF;

// Rule Features
ruleFeatures returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Features'
		{
			newLeafNode(otherlv_0, grammarAccess.getFeaturesAccess().getFeaturesKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getFeaturesAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFeaturesAccess().getFileExpressionParserRuleCall_2_0());
				}
				lv_file_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFeaturesRule());
					}
					set(
						$current,
						"file",
						lv_file_2_0,
						"fr.irisa.DslCsv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getFeaturesAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleRow
entryRuleRow returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRowRule()); }
	iv_ruleRow=ruleRow
	{ $current=$iv_ruleRow.current; }
	EOF;

// Rule Row
ruleRow returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Row'
		{
			newLeafNode(otherlv_0, grammarAccess.getRowAccess().getRowKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getRowAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRowAccess().getFileExpressionParserRuleCall_2_0());
				}
				lv_file_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRowRule());
					}
					set(
						$current,
						"file",
						lv_file_2_0,
						"fr.irisa.DslCsv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getRowAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRowAccess().getVectorExpressionParserRuleCall_4_0());
				}
				lv_vector_4_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRowRule());
					}
					set(
						$current,
						"vector",
						lv_vector_4_0,
						"fr.irisa.DslCsv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getRowAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleColumn
entryRuleColumn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColumnRule()); }
	iv_ruleColumn=ruleColumn
	{ $current=$iv_ruleColumn.current; }
	EOF;

// Rule Column
ruleColumn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Column'
		{
			newLeafNode(otherlv_0, grammarAccess.getColumnAccess().getColumnKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getColumnAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getColumnAccess().getFileExpressionParserRuleCall_2_0());
				}
				lv_file_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getColumnRule());
					}
					set(
						$current,
						"file",
						lv_file_2_0,
						"fr.irisa.DslCsv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getColumnAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getColumnAccess().getColumnNameExpressionParserRuleCall_4_0());
				}
				lv_columnName_4_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getColumnRule());
					}
					set(
						$current,
						"columnName",
						lv_columnName_4_0,
						"fr.irisa.DslCsv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=','
		{
			newLeafNode(otherlv_5, grammarAccess.getColumnAccess().getCommaKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getColumnAccess().getVectorExpressionParserRuleCall_6_0());
				}
				lv_vector_6_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getColumnRule());
					}
					set(
						$current,
						"vector",
						lv_vector_6_0,
						"fr.irisa.DslCsv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getColumnAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleProduct
entryRuleProduct returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProductRule()); }
	iv_ruleProduct=ruleProduct
	{ $current=$iv_ruleProduct.current; }
	EOF;

// Rule Product
ruleProduct returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Product'
		{
			newLeafNode(otherlv_0, grammarAccess.getProductAccess().getProductKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getProductAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProductAccess().getVectorExpressionParserRuleCall_2_0());
				}
				lv_vector_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProductRule());
					}
					set(
						$current,
						"vector",
						lv_vector_2_0,
						"fr.irisa.DslCsv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getProductAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleSum
entryRuleSum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSumRule()); }
	iv_ruleSum=ruleSum
	{ $current=$iv_ruleSum.current; }
	EOF;

// Rule Sum
ruleSum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Sum'
		{
			newLeafNode(otherlv_0, grammarAccess.getSumAccess().getSumKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getSumAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSumAccess().getVectorExpressionParserRuleCall_2_0());
				}
				lv_vector_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSumRule());
					}
					set(
						$current,
						"vector",
						lv_vector_2_0,
						"fr.irisa.DslCsv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getSumAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleMean
entryRuleMean returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMeanRule()); }
	iv_ruleMean=ruleMean
	{ $current=$iv_ruleMean.current; }
	EOF;

// Rule Mean
ruleMean returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Mean'
		{
			newLeafNode(otherlv_0, grammarAccess.getMeanAccess().getMeanKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getMeanAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMeanAccess().getVectorExpressionParserRuleCall_2_0());
				}
				lv_vector_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMeanRule());
					}
					set(
						$current,
						"vector",
						lv_vector_2_0,
						"fr.irisa.DslCsv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getMeanAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleFilter
entryRuleFilter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFilterRule()); }
	iv_ruleFilter=ruleFilter
	{ $current=$iv_ruleFilter.current; }
	EOF;

// Rule Filter
ruleFilter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Filter'
		{
			newLeafNode(otherlv_0, grammarAccess.getFilterAccess().getFilterKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getFilterAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFilterAccess().getFileExpressionParserRuleCall_2_0());
				}
				lv_file_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFilterRule());
					}
					set(
						$current,
						"file",
						lv_file_2_0,
						"fr.irisa.DslCsv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getFilterAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFilterAccess().getCondExpressionParserRuleCall_4_0());
				}
				lv_cond_4_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFilterRule());
					}
					set(
						$current,
						"cond",
						lv_cond_4_0,
						"fr.irisa.DslCsv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getFilterAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleUnselect
entryRuleUnselect returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnselectRule()); }
	iv_ruleUnselect=ruleUnselect
	{ $current=$iv_ruleUnselect.current; }
	EOF;

// Rule Unselect
ruleUnselect returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Unselect'
		{
			newLeafNode(otherlv_0, grammarAccess.getUnselectAccess().getUnselectKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getUnselectAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUnselectAccess().getFileExpressionParserRuleCall_2_0());
				}
				lv_file_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnselectRule());
					}
					set(
						$current,
						"file",
						lv_file_2_0,
						"fr.irisa.DslCsv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getUnselectAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUnselectAccess().getFeaturesExpressionParserRuleCall_4_0());
				}
				lv_features_4_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnselectRule());
					}
					set(
						$current,
						"features",
						lv_features_4_0,
						"fr.irisa.DslCsv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getUnselectAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleSelect
entryRuleSelect returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectRule()); }
	iv_ruleSelect=ruleSelect
	{ $current=$iv_ruleSelect.current; }
	EOF;

// Rule Select
ruleSelect returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Select'
		{
			newLeafNode(otherlv_0, grammarAccess.getSelectAccess().getSelectKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getSelectAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSelectAccess().getFileExpressionParserRuleCall_2_0());
				}
				lv_file_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSelectRule());
					}
					set(
						$current,
						"file",
						lv_file_2_0,
						"fr.irisa.DslCsv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getSelectAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSelectAccess().getFeaturesExpressionParserRuleCall_4_0());
				}
				lv_features_4_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSelectRule());
					}
					set(
						$current,
						"features",
						lv_features_4_0,
						"fr.irisa.DslCsv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getSelectAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleSave
entryRuleSave returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSaveRule()); }
	iv_ruleSave=ruleSave
	{ $current=$iv_ruleSave.current; }
	EOF;

// Rule Save
ruleSave returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Save'
		{
			newLeafNode(otherlv_0, grammarAccess.getSaveAccess().getSaveKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getSaveAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSaveAccess().getFilenameExpressionParserRuleCall_2_0());
				}
				lv_filename_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSaveRule());
					}
					set(
						$current,
						"filename",
						lv_filename_2_0,
						"fr.irisa.DslCsv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getSaveAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSaveAccess().getFileExpressionParserRuleCall_4_0());
				}
				lv_file_4_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSaveRule());
					}
					set(
						$current,
						"file",
						lv_file_4_0,
						"fr.irisa.DslCsv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=','
		{
			newLeafNode(otherlv_5, grammarAccess.getSaveAccess().getCommaKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSaveAccess().getSepExpressionParserRuleCall_6_0());
				}
				lv_sep_6_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSaveRule());
					}
					set(
						$current,
						"sep",
						lv_sep_6_0,
						"fr.irisa.DslCsv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=','
		{
			newLeafNode(otherlv_7, grammarAccess.getSaveAccess().getCommaKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSaveAccess().getSaveHeaderExpressionParserRuleCall_8_0());
				}
				lv_saveHeader_8_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSaveRule());
					}
					set(
						$current,
						"saveHeader",
						lv_saveHeader_8_0,
						"fr.irisa.DslCsv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_9=','
		{
			newLeafNode(otherlv_9, grammarAccess.getSaveAccess().getCommaKeyword_9());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSaveAccess().getSaveIDExpressionParserRuleCall_10_0());
				}
				lv_saveID_10_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSaveRule());
					}
					set(
						$current,
						"saveID",
						lv_saveID_10_0,
						"fr.irisa.DslCsv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_11=')'
		{
			newLeafNode(otherlv_11, grammarAccess.getSaveAccess().getRightParenthesisKeyword_11());
		}
	)
;

// Entry rule entryRuleAcquire
entryRuleAcquire returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAcquireRule()); }
	iv_ruleAcquire=ruleAcquire
	{ $current=$iv_ruleAcquire.current; }
	EOF;

// Rule Acquire
ruleAcquire returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Acquire'
		{
			newLeafNode(otherlv_0, grammarAccess.getAcquireAccess().getAcquireKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getAcquireAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAcquireAccess().getPathExpressionParserRuleCall_2_0());
				}
				lv_path_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAcquireRule());
					}
					set(
						$current,
						"path",
						lv_path_2_0,
						"fr.irisa.DslCsv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getAcquireAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAcquireAccess().getSepExpressionParserRuleCall_4_0());
				}
				lv_sep_4_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAcquireRule());
					}
					set(
						$current,
						"sep",
						lv_sep_4_0,
						"fr.irisa.DslCsv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=','
		{
			newLeafNode(otherlv_5, grammarAccess.getAcquireAccess().getCommaKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAcquireAccess().getHasHeaderExpressionParserRuleCall_6_0());
				}
				lv_hasHeader_6_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAcquireRule());
					}
					set(
						$current,
						"hasHeader",
						lv_hasHeader_6_0,
						"fr.irisa.DslCsv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getAcquireAccess().getRightParenthesisKeyword_7());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
