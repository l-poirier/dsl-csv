/**
 * generated by Xtext 2.25.0
 */
package fr.irisa.dslCsv.impl;

import fr.irisa.dslCsv.Acquire;
import fr.irisa.dslCsv.DslCsvPackage;
import fr.irisa.dslCsv.Expression;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Acquire</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.irisa.dslCsv.impl.AcquireImpl#getPath <em>Path</em>}</li>
 *   <li>{@link fr.irisa.dslCsv.impl.AcquireImpl#getSep <em>Sep</em>}</li>
 *   <li>{@link fr.irisa.dslCsv.impl.AcquireImpl#getHasHeader <em>Has Header</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AcquireImpl extends FuncCallImpl implements Acquire
{
  /**
   * The cached value of the '{@link #getPath() <em>Path</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPath()
   * @generated
   * @ordered
   */
  protected Expression path;

  /**
   * The cached value of the '{@link #getSep() <em>Sep</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSep()
   * @generated
   * @ordered
   */
  protected Expression sep;

  /**
   * The cached value of the '{@link #getHasHeader() <em>Has Header</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHasHeader()
   * @generated
   * @ordered
   */
  protected Expression hasHeader;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AcquireImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DslCsvPackage.Literals.ACQUIRE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getPath()
  {
    return path;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPath(Expression newPath, NotificationChain msgs)
  {
    Expression oldPath = path;
    path = newPath;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslCsvPackage.ACQUIRE__PATH, oldPath, newPath);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPath(Expression newPath)
  {
    if (newPath != path)
    {
      NotificationChain msgs = null;
      if (path != null)
        msgs = ((InternalEObject)path).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslCsvPackage.ACQUIRE__PATH, null, msgs);
      if (newPath != null)
        msgs = ((InternalEObject)newPath).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslCsvPackage.ACQUIRE__PATH, null, msgs);
      msgs = basicSetPath(newPath, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslCsvPackage.ACQUIRE__PATH, newPath, newPath));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getSep()
  {
    return sep;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSep(Expression newSep, NotificationChain msgs)
  {
    Expression oldSep = sep;
    sep = newSep;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslCsvPackage.ACQUIRE__SEP, oldSep, newSep);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSep(Expression newSep)
  {
    if (newSep != sep)
    {
      NotificationChain msgs = null;
      if (sep != null)
        msgs = ((InternalEObject)sep).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslCsvPackage.ACQUIRE__SEP, null, msgs);
      if (newSep != null)
        msgs = ((InternalEObject)newSep).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslCsvPackage.ACQUIRE__SEP, null, msgs);
      msgs = basicSetSep(newSep, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslCsvPackage.ACQUIRE__SEP, newSep, newSep));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getHasHeader()
  {
    return hasHeader;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetHasHeader(Expression newHasHeader, NotificationChain msgs)
  {
    Expression oldHasHeader = hasHeader;
    hasHeader = newHasHeader;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslCsvPackage.ACQUIRE__HAS_HEADER, oldHasHeader, newHasHeader);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setHasHeader(Expression newHasHeader)
  {
    if (newHasHeader != hasHeader)
    {
      NotificationChain msgs = null;
      if (hasHeader != null)
        msgs = ((InternalEObject)hasHeader).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslCsvPackage.ACQUIRE__HAS_HEADER, null, msgs);
      if (newHasHeader != null)
        msgs = ((InternalEObject)newHasHeader).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslCsvPackage.ACQUIRE__HAS_HEADER, null, msgs);
      msgs = basicSetHasHeader(newHasHeader, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslCsvPackage.ACQUIRE__HAS_HEADER, newHasHeader, newHasHeader));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DslCsvPackage.ACQUIRE__PATH:
        return basicSetPath(null, msgs);
      case DslCsvPackage.ACQUIRE__SEP:
        return basicSetSep(null, msgs);
      case DslCsvPackage.ACQUIRE__HAS_HEADER:
        return basicSetHasHeader(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DslCsvPackage.ACQUIRE__PATH:
        return getPath();
      case DslCsvPackage.ACQUIRE__SEP:
        return getSep();
      case DslCsvPackage.ACQUIRE__HAS_HEADER:
        return getHasHeader();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DslCsvPackage.ACQUIRE__PATH:
        setPath((Expression)newValue);
        return;
      case DslCsvPackage.ACQUIRE__SEP:
        setSep((Expression)newValue);
        return;
      case DslCsvPackage.ACQUIRE__HAS_HEADER:
        setHasHeader((Expression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DslCsvPackage.ACQUIRE__PATH:
        setPath((Expression)null);
        return;
      case DslCsvPackage.ACQUIRE__SEP:
        setSep((Expression)null);
        return;
      case DslCsvPackage.ACQUIRE__HAS_HEADER:
        setHasHeader((Expression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DslCsvPackage.ACQUIRE__PATH:
        return path != null;
      case DslCsvPackage.ACQUIRE__SEP:
        return sep != null;
      case DslCsvPackage.ACQUIRE__HAS_HEADER:
        return hasHeader != null;
    }
    return super.eIsSet(featureID);
  }

} //AcquireImpl
