/**
 * generated by Xtext 2.25.0
 */
package fr.irisa.dslCsv.impl;

import fr.irisa.dslCsv.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class DslCsvFactoryImpl extends EFactoryImpl implements DslCsvFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static DslCsvFactory init()
  {
    try
    {
      DslCsvFactory theDslCsvFactory = (DslCsvFactory)EPackage.Registry.INSTANCE.getEFactory(DslCsvPackage.eNS_URI);
      if (theDslCsvFactory != null)
      {
        return theDslCsvFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new DslCsvFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DslCsvFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case DslCsvPackage.PROGRAM: return createProgram();
      case DslCsvPackage.EXPRESSION: return createExpression();
      case DslCsvPackage.ASSIGN: return createAssign();
      case DslCsvPackage.NOP: return createNop();
      case DslCsvPackage.LOGICAL_EXPRESSION: return createLogicalExpression();
      case DslCsvPackage.COMP_EXPRESSION: return createCompExpression();
      case DslCsvPackage.ARITH_EXPRESSION: return createArithExpression();
      case DslCsvPackage.SUB_EXPRESSION: return createSubExpression();
      case DslCsvPackage.BASE_EXPRESSION: return createBaseExpression();
      case DslCsvPackage.VAR: return createVar();
      case DslCsvPackage.CONST_NAT: return createConstNat();
      case DslCsvPackage.CONST_STR: return createConstStr();
      case DslCsvPackage.PARENTHESIS: return createParenthesis();
      case DslCsvPackage.CONST_VECTOR: return createConstVector();
      case DslCsvPackage.FUNC_CALL: return createFuncCall();
      case DslCsvPackage.COUNT: return createCount();
      case DslCsvPackage.SORT: return createSort();
      case DslCsvPackage.DIM: return createDim();
      case DslCsvPackage.PRINT: return createPrint();
      case DslCsvPackage.FEATURES: return createFeatures();
      case DslCsvPackage.ROW: return createRow();
      case DslCsvPackage.COLUMN: return createColumn();
      case DslCsvPackage.PRODUCT: return createProduct();
      case DslCsvPackage.SUM: return createSum();
      case DslCsvPackage.MEAN: return createMean();
      case DslCsvPackage.FILTER: return createFilter();
      case DslCsvPackage.UNSELECT: return createUnselect();
      case DslCsvPackage.SELECT: return createSelect();
      case DslCsvPackage.SAVE: return createSave();
      case DslCsvPackage.ACQUIRE: return createAcquire();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Program createProgram()
  {
    ProgramImpl program = new ProgramImpl();
    return program;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Assign createAssign()
  {
    AssignImpl assign = new AssignImpl();
    return assign;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Nop createNop()
  {
    NopImpl nop = new NopImpl();
    return nop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LogicalExpression createLogicalExpression()
  {
    LogicalExpressionImpl logicalExpression = new LogicalExpressionImpl();
    return logicalExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CompExpression createCompExpression()
  {
    CompExpressionImpl compExpression = new CompExpressionImpl();
    return compExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArithExpression createArithExpression()
  {
    ArithExpressionImpl arithExpression = new ArithExpressionImpl();
    return arithExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SubExpression createSubExpression()
  {
    SubExpressionImpl subExpression = new SubExpressionImpl();
    return subExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BaseExpression createBaseExpression()
  {
    BaseExpressionImpl baseExpression = new BaseExpressionImpl();
    return baseExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Var createVar()
  {
    VarImpl var = new VarImpl();
    return var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConstNat createConstNat()
  {
    ConstNatImpl constNat = new ConstNatImpl();
    return constNat;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConstStr createConstStr()
  {
    ConstStrImpl constStr = new ConstStrImpl();
    return constStr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parenthesis createParenthesis()
  {
    ParenthesisImpl parenthesis = new ParenthesisImpl();
    return parenthesis;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConstVector createConstVector()
  {
    ConstVectorImpl constVector = new ConstVectorImpl();
    return constVector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FuncCall createFuncCall()
  {
    FuncCallImpl funcCall = new FuncCallImpl();
    return funcCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Count createCount()
  {
    CountImpl count = new CountImpl();
    return count;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Sort createSort()
  {
    SortImpl sort = new SortImpl();
    return sort;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Dim createDim()
  {
    DimImpl dim = new DimImpl();
    return dim;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Print createPrint()
  {
    PrintImpl print = new PrintImpl();
    return print;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Features createFeatures()
  {
    FeaturesImpl features = new FeaturesImpl();
    return features;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Row createRow()
  {
    RowImpl row = new RowImpl();
    return row;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Column createColumn()
  {
    ColumnImpl column = new ColumnImpl();
    return column;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Product createProduct()
  {
    ProductImpl product = new ProductImpl();
    return product;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Sum createSum()
  {
    SumImpl sum = new SumImpl();
    return sum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Mean createMean()
  {
    MeanImpl mean = new MeanImpl();
    return mean;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Filter createFilter()
  {
    FilterImpl filter = new FilterImpl();
    return filter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Unselect createUnselect()
  {
    UnselectImpl unselect = new UnselectImpl();
    return unselect;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Select createSelect()
  {
    SelectImpl select = new SelectImpl();
    return select;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Save createSave()
  {
    SaveImpl save = new SaveImpl();
    return save;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Acquire createAcquire()
  {
    AcquireImpl acquire = new AcquireImpl();
    return acquire;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DslCsvPackage getDslCsvPackage()
  {
    return (DslCsvPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static DslCsvPackage getPackage()
  {
    return DslCsvPackage.eINSTANCE;
  }

} //DslCsvFactoryImpl
